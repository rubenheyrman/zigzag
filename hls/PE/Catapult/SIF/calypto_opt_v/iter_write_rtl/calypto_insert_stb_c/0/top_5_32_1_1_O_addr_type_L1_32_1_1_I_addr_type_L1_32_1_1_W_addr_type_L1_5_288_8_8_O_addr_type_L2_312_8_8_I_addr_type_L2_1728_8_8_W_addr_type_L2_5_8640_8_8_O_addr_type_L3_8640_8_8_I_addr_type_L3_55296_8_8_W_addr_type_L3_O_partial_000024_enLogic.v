//+-----------------------------------------------------------------------------------+
//|                                                                                   |
//| Generated by PowerPro-10.3c_2/849904   (Jan 10 2020)  linux64  P2001101230        |
//| on Tue Jul 13 11:50:15 2021.                                                      |
//|                                                                                   |
//| This document may be used and distributed without restriction provided that       |
//| this copyright statement is not removed from the file and that any derivative     |
//| work contains this copyright notice.                                              |
//|                                                                                   |
//+-----------------------------------------------------------------------------------+

//This verilog contains verilog 2001 constructs.


 // QuickLink: Instance: top_5_32_1_1_O_addr_type_L1_32_1_1_I_addr_type_L1_32_1_1_W_addr_type_L1_5_288_8_8_O_addr_type_L2_312_8_8_I_addr_type_L2_1728_8_8_W_addr_type_L2_5_8640_8_8_O_addr_type_L3_8640_8_8_I_addr_type_L3_55296_8_8_W_addr_type_L3_O_partial_000001.PE.rf_5_32_32_32_1_1_1_1_1_1_O_partial_type_O_addr_type_L1_I_type_I_addr_type_L1_W_type_W_addr_type_L1_run_inst.rf_5_32_32_32_1_1_1_1_1_1_O_partial_type_O_addr_type_L1_I_type_I_addr_type_L1_W_type_W_addr_type_L1_run_O_wr_data_rsci_inst.rf_5_32_32_32_1_1_1_1_1_1_O_partial_type_O_addr_type_L1_I_type_I_addr_type_L1_W_type_W_addr_type_L1_run_O_wr_data_rsci_O_wr_data_wait_dp_inst, Module: topless_5comma_32comma_1comma_1comma_O_addr_type_L1comma_32comma_1comma_1comma_I_addr_type_L1comma_32comma_1comma_1comma_W_addr_type_L1comma_5comma_288comma_8comma_8comma_O_addr_type_L2comma_312comma_8comma_8comma_I_addr_type_L2c000016
 //            Source-relation: power_top_5_32_1_1_O_addr_type_L1_32_1_1_I_addr_type_L1_32_1_1_W_addr_type_L1_5_288_8_8_O_addr_type_L2_312_8_8_I_addr_type_L2_1728_8_8_W_addr_type_L2_5_8640_8_8_O_addr_type_L3_8640_8_8_I_addr_type_L3_55296_8_8_W_addr_type_L3_O_pa000000.v:1648
 //
 //            Area before justification: 4.788
 //            Area after  justification: 15.162( 216.667% increase )
 //
 //            Signals with hierarchical names need to have new hierarchy ports/signals created.

 // wire O_wr_data_rsci_idat_bfwt_en ; 


module cg_obs_topless_5comma_32comma_1comma_1comma_O_addr_type_L1comma_32comma_1comma_1comma_I_addr_type_L1comma_32comma_1comma_1comma_W_addr_type_L1comma_5comma_288comma_8comma_8comma_O_addr_type_L2comma_312comma_8comma_8comma_I_addr_type_L2c000016 ( O_wr_data_rsci_oswt
 , O_wr_data_rsci_biwt , O_wr_data_rsci_bdwt , O_wr_data_rsci_idat_bfwt_en
 , run_wen_1 , O_wr_data_rsci_bcwt , rst_2 , or_tmp_242 ) ;
 input wire  O_wr_data_rsci_oswt ; 
 input wire  O_wr_data_rsci_biwt ; 
 input wire  O_wr_data_rsci_bdwt ; 
 input wire  run_wen_1 ; 
 input wire  O_wr_data_rsci_bcwt ; 
 input wire  rst_2 ; 
 input wire  or_tmp_242 ; 
 output wire  O_wr_data_rsci_idat_bfwt_en ; 
 wire E_1 ; 
 wire E_2 ; 
 wire E_3 ; 
 wire  [0:0] E_4 ; 
 wire E_5 ; 
 wire E_6 ; 
 wire E_7 ; 
 wire E_8 ; 
 wire E_9 ; 
 wire E_10 ; 
cg_db_obs_topless_5comma_32comma_1comma_1comma_O_addr_type_L1comma_32comma_1comma_1comma_I_addr_type_L1comma_32comma_1comma_1comma_W_addr_type_L1comma_5comma_288comma_8comma_8comma_O_addr_type_L2comma_312comma_8comma_8comma_I_addr_type_L2c000016  inst_cg_db_obs_topless_5comma_32comma_1c ( 
		.run_wten_d ( E_9 )  , .O_wr_data_rsci_bcwt_d ( E_1 )  , .reg_O_wr_data_rsci_irdy_run_psct_cse_d ( E_3 )  , 
		.E_6317 ( E_2 )  , .reg_O_wr_data_rsci_irdy_run_psct_cse ( O_wr_data_rsci_oswt )  , 
		.O_wr_data_rsci_idat_bfwt_en ( O_wr_data_rsci_idat_bfwt_en )  );
  assign /* unsigned    bit */  E_2 = (rst_2 | run_wen_1) ;
  assign /* unsigned    bit */  E_3 = ( rst_2 ? E_4 : or_tmp_242 ) ;
  assign /* unsigned  1-bit */  E_4 = 1'h0;
  assign /* unsigned    bit */  E_1 = ( rst_2 ? E_4 : E_5 ) ;
  assign /* unsigned    bit */  E_5 = ( ~E_6 ) ;
  assign /* unsigned    bit */  E_6 = (E_7 | O_wr_data_rsci_bdwt) ;
  assign /* unsigned    bit */  E_7 = ( ~E_8 ) ;
  assign /* unsigned    bit */  E_8 = (O_wr_data_rsci_bcwt | O_wr_data_rsci_biwt) ;
  assign /* unsigned    bit */  E_9 = ( rst_2 ? E_4 : E_10 ) ;
  assign /* unsigned    bit */  E_10 = ( ~run_wen_1 ) ;
endmodule

module cg_db_obs_topless_5comma_32comma_1comma_1comma_O_addr_type_L1comma_32comma_1comma_1comma_I_addr_type_L1comma_32comma_1comma_1comma_W_addr_type_L1comma_5comma_288comma_8comma_8comma_O_addr_type_L2comma_312comma_8comma_8comma_I_addr_type_L2c000016 ( run_wten_d
 , O_wr_data_rsci_bcwt_d , reg_O_wr_data_rsci_irdy_run_psct_cse_d , E_6317
 , reg_O_wr_data_rsci_irdy_run_psct_cse , O_wr_data_rsci_idat_bfwt_en ) ;
 input wire  run_wten_d ; 
 input wire  O_wr_data_rsci_bcwt_d ; 
 input wire  reg_O_wr_data_rsci_irdy_run_psct_cse_d ; 
 input wire  E_6317 ; 
 input wire  reg_O_wr_data_rsci_irdy_run_psct_cse ; 
 output wire  O_wr_data_rsci_idat_bfwt_en ; 
 wire E_1 ; 
 wire E_2 ; 
 wire E_3 ; 
 wire E_4 ; 
  assign /* unsigned    bit */  O_wr_data_rsci_idat_bfwt_en = (run_wten_d | E_1) ;
  assign /* unsigned    bit */  E_1 = (O_wr_data_rsci_bcwt_d | E_2) ;
  assign /* unsigned    bit */  E_2 = ( !E_3 ) ;
  assign /* unsigned    bit */  E_3 = (reg_O_wr_data_rsci_irdy_run_psct_cse_d & E_4) ;
  assign /* unsigned    bit */  E_4 = (E_6317 | reg_O_wr_data_rsci_irdy_run_psct_cse) ;
  function convertXtoHigh;
   input in_en;
   if(in_en == 1'b0)
     convertXtoHigh = 1'b0;
   else
     convertXtoHigh = 1'b1;
  endfunction
endmodule


 // QuickLink: Instance: top_5_32_1_1_O_addr_type_L1_32_1_1_I_addr_type_L1_32_1_1_W_addr_type_L1_5_288_8_8_O_addr_type_L2_312_8_8_I_addr_type_L2_1728_8_8_W_addr_type_L2_5_8640_8_8_O_addr_type_L3_8640_8_8_I_addr_type_L3_55296_8_8_W_addr_type_L3_O_partial_000001.PE.rf_5_32_32_32_1_1_1_1_1_1_O_partial_type_O_addr_type_L1_I_type_I_addr_type_L1_W_type_W_addr_type_L1_run_inst.rf_5_32_32_32_1_1_1_1_1_1_O_partial_type_O_addr_type_L1_I_type_I_addr_type_L1_W_type_W_addr_type_L1_run_I_wr_data_rsci_inst.rf_5_32_32_32_1_1_1_1_1_1_O_partial_type_O_addr_type_L1_I_type_I_addr_type_L1_W_type_W_addr_type_L1_run_I_wr_data_rsci_I_wr_data_wait_dp_inst, Module: topless_5comma_32comma_1comma_1comma_O_addr_type_L1comma_32comma_1comma_1comma_I_addr_type_L1comma_32comma_1comma_1comma_W_addr_type_L1comma_5comma_288comma_8comma_8comma_O_addr_type_L2comma_312comma_8comma_8comma_I_addr_type_L2c000026
 //            Source-relation: power_top_5_32_1_1_O_addr_type_L1_32_1_1_I_addr_type_L1_32_1_1_W_addr_type_L1_5_288_8_8_O_addr_type_L2_312_8_8_I_addr_type_L2_1728_8_8_W_addr_type_L2_5_8640_8_8_O_addr_type_L3_8640_8_8_I_addr_type_L3_55296_8_8_W_addr_type_L3_O_pa000000.v:1450
 //
 //            Area before justification: 4.788
 //            Area after  justification: 17.822( 272.222% increase )
 //
 //            Signals with hierarchical names need to have new hierarchy ports/signals created.

 // wire I_wr_data_rsci_idat_bfwt_en ; 


module cg_obs_topless_5comma_32comma_1comma_1comma_O_addr_type_L1comma_32comma_1comma_1comma_I_addr_type_L1comma_32comma_1comma_1comma_W_addr_type_L1comma_5comma_288comma_8comma_8comma_O_addr_type_L2comma_312comma_8comma_8comma_I_addr_type_L2c000026 ( I_wr_data_rsci_oswt
 , fsm_output , I_wr_data_rsci_biwt , I_wr_data_rsci_bdwt , I_wr_data_rsci_idat_bfwt_en
 , I_wr_data_rsci_bcwt , rst_3 , run_wen_1 , and_tmp_80 , mux_360_nl ) ;
 input wire  I_wr_data_rsci_oswt ; 
 input wire  [1:0]  fsm_output ; 
 input wire  I_wr_data_rsci_biwt ; 
 input wire  I_wr_data_rsci_bdwt ; 
 input wire  I_wr_data_rsci_bcwt ; 
 input wire  rst_3 ; 
 input wire  run_wen_1 ; 
 input wire  and_tmp_80 ; 
 input wire  [0:0]  mux_360_nl ; 
 output wire  I_wr_data_rsci_idat_bfwt_en ; 
 wire E_1 ; 
 wire E_2 ; 
 wire E_3 ; 
 wire E_4 ; 
 wire E_5 ; 
 wire E_6 ; 
 wire  [0:0] E_7 ; 
 wire  [0:0] E_8 ; 
 wire E_9 ; 
 wire E_10 ; 
 wire E_11 ; 
 wire E_12 ; 
 wire E_13 ; 
 wire E_14 ; 
cg_db_obs_topless_5comma_32comma_1comma_1comma_O_addr_type_L1comma_32comma_1comma_1comma_I_addr_type_L1comma_32comma_1comma_1comma_W_addr_type_L1comma_5comma_288comma_8comma_8comma_O_addr_type_L2comma_312comma_8comma_8comma_I_addr_type_L2c000026  inst_cg_db_obs_topless_5comma_32comma_1c ( 
		.I_wr_data_rsci_bcwt_d ( E_1 )  , .run_wten_d ( E_9 )  , .reg_I_wr_data_rsci_irdy_run_psct_cse_d ( E_3 )  , 
		.E_6317 ( E_2 )  , .reg_I_wr_data_rsci_irdy_run_psct_cse ( I_wr_data_rsci_oswt )  , 
		.I_wr_data_rsci_idat_bfwt_en ( I_wr_data_rsci_idat_bfwt_en )  );
  assign /* unsigned    bit */  E_2 = (rst_3 | run_wen_1) ;
  assign /* unsigned    bit */  E_3 = ( rst_3 ? E_8 : E_4 ) ;
  assign /* unsigned    bit */  E_4 = (E_5 & E_7) ;
  assign /* unsigned    bit */  E_5 = (mux_360_nl | E_6) ;
  assign /* unsigned    bit */  E_6 = ( ~and_tmp_80 ) ;
  assign /* unsigned  1-bit */  E_7 = fsm_output [1]  ;
  assign /* unsigned  1-bit */  E_8 = 1'h0;
  assign /* unsigned    bit */  E_9 = ( rst_3 ? E_8 : E_10 ) ;
  assign /* unsigned    bit */  E_10 = ( ~run_wen_1 ) ;
  assign /* unsigned    bit */  E_1 = ( rst_3 ? E_8 : E_11 ) ;
  assign /* unsigned    bit */  E_11 = ( ~E_12 ) ;
  assign /* unsigned    bit */  E_12 = (E_13 | I_wr_data_rsci_bdwt) ;
  assign /* unsigned    bit */  E_13 = ( ~E_14 ) ;
  assign /* unsigned    bit */  E_14 = (I_wr_data_rsci_bcwt | I_wr_data_rsci_biwt) ;
endmodule

module cg_db_obs_topless_5comma_32comma_1comma_1comma_O_addr_type_L1comma_32comma_1comma_1comma_I_addr_type_L1comma_32comma_1comma_1comma_W_addr_type_L1comma_5comma_288comma_8comma_8comma_O_addr_type_L2comma_312comma_8comma_8comma_I_addr_type_L2c000026 ( I_wr_data_rsci_bcwt_d
 , run_wten_d , reg_I_wr_data_rsci_irdy_run_psct_cse_d , E_6317 , reg_I_wr_data_rsci_irdy_run_psct_cse
 , I_wr_data_rsci_idat_bfwt_en ) ;
 input wire  I_wr_data_rsci_bcwt_d ; 
 input wire  run_wten_d ; 
 input wire  reg_I_wr_data_rsci_irdy_run_psct_cse_d ; 
 input wire  E_6317 ; 
 input wire  reg_I_wr_data_rsci_irdy_run_psct_cse ; 
 output wire  I_wr_data_rsci_idat_bfwt_en ; 
 wire E_1 ; 
 wire E_2 ; 
 wire E_3 ; 
 wire E_4 ; 
  assign /* unsigned    bit */  I_wr_data_rsci_idat_bfwt_en = (I_wr_data_rsci_bcwt_d | E_1) ;
  assign /* unsigned    bit */  E_1 = (run_wten_d | E_2) ;
  assign /* unsigned    bit */  E_2 = ( !E_3 ) ;
  assign /* unsigned    bit */  E_3 = (reg_I_wr_data_rsci_irdy_run_psct_cse_d & E_4) ;
  assign /* unsigned    bit */  E_4 = (E_6317 | reg_I_wr_data_rsci_irdy_run_psct_cse) ;
  function convertXtoHigh;
   input in_en;
   if(in_en == 1'b0)
     convertXtoHigh = 1'b0;
   else
     convertXtoHigh = 1'b1;
  endfunction
endmodule


 // QuickLink: Instance: top_5_32_1_1_O_addr_type_L1_32_1_1_I_addr_type_L1_32_1_1_W_addr_type_L1_5_288_8_8_O_addr_type_L2_312_8_8_I_addr_type_L2_1728_8_8_W_addr_type_L2_5_8640_8_8_O_addr_type_L3_8640_8_8_I_addr_type_L3_55296_8_8_W_addr_type_L3_O_partial_000001.PE.rf_5_32_32_32_1_1_1_1_1_1_O_partial_type_O_addr_type_L1_I_type_I_addr_type_L1_W_type_W_addr_type_L1_run_inst.rf_5_32_32_32_1_1_1_1_1_1_O_partial_type_O_addr_type_L1_I_type_I_addr_type_L1_W_type_W_addr_type_L1_run_W_wr_data_rsci_inst.rf_5_32_32_32_1_1_1_1_1_1_O_partial_type_O_addr_type_L1_I_type_I_addr_type_L1_W_type_W_addr_type_L1_run_W_wr_data_rsci_W_wr_data_wait_dp_inst, Module: topless_5comma_32comma_1comma_1comma_O_addr_type_L1comma_32comma_1comma_1comma_I_addr_type_L1comma_32comma_1comma_1comma_W_addr_type_L1comma_5comma_288comma_8comma_8comma_O_addr_type_L2comma_312comma_8comma_8comma_I_addr_type_L2c000031
 //            Source-relation: power_top_5_32_1_1_O_addr_type_L1_32_1_1_I_addr_type_L1_32_1_1_W_addr_type_L1_5_288_8_8_O_addr_type_L2_312_8_8_I_addr_type_L2_1728_8_8_W_addr_type_L2_5_8640_8_8_O_addr_type_L3_8640_8_8_I_addr_type_L3_55296_8_8_W_addr_type_L3_O_pa000000.v:1336
 //
 //            Area before justification: 0
 //            Area after  justification: 1.862( 100% increase )
 //
 //            Signals with hierarchical names need to have new hierarchy ports/signals created.

 // wire W_wr_data_rsci_idat_bfwt_en ; 


module cg_obs_topless_5comma_32comma_1comma_1comma_O_addr_type_L1comma_32comma_1comma_1comma_I_addr_type_L1comma_32comma_1comma_1comma_W_addr_type_L1comma_5comma_288comma_8comma_8comma_O_addr_type_L2comma_312comma_8comma_8comma_I_addr_type_L2c000031 ( rst
 , W_wr_data_rsci_ivld , W_wr_data_rsci_idat_bfwt_en ) ;
 input wire  rst ; 
 input wire  W_wr_data_rsci_ivld ; 
 output wire  W_wr_data_rsci_idat_bfwt_en ; 
 wire E_1 ; 
 wire E_2 ; 
cg_db_obs_topless_5comma_32comma_1comma_1comma_O_addr_type_L1comma_32comma_1comma_1comma_I_addr_type_L1comma_32comma_1comma_1comma_W_addr_type_L1comma_5comma_288comma_8comma_8comma_O_addr_type_L2comma_312comma_8comma_8comma_I_addr_type_L2c000031  inst_cg_db_obs_topless_5comma_32comma_1c ( 
		.W_wr_data_rsci_ivld_bfwt_d ( E_1 )  , .W_wr_data_rsci_idat_bfwt_en ( W_wr_data_rsci_idat_bfwt_en )  );
  assign /* unsigned    bit */  E_1 = ( rst ? E_2 : W_wr_data_rsci_ivld ) ;
  assign /* unsigned    bit */  E_2 = 1'h0;
endmodule

module cg_db_obs_topless_5comma_32comma_1comma_1comma_O_addr_type_L1comma_32comma_1comma_1comma_I_addr_type_L1comma_32comma_1comma_1comma_W_addr_type_L1comma_5comma_288comma_8comma_8comma_O_addr_type_L2comma_312comma_8comma_8comma_I_addr_type_L2c000031 ( W_wr_data_rsci_ivld_bfwt_d
 , W_wr_data_rsci_idat_bfwt_en ) ;
 input wire  W_wr_data_rsci_ivld_bfwt_d ; 
 output wire  W_wr_data_rsci_idat_bfwt_en ; 
assign W_wr_data_rsci_idat_bfwt_en = W_wr_data_rsci_ivld_bfwt_d ;
  function convertXtoHigh;
   input in_en;
   if(in_en == 1'b0)
     convertXtoHigh = 1'b0;
   else
     convertXtoHigh = 1'b1;
  endfunction
endmodule


 // QuickLink: Instance: top_5_32_1_1_O_addr_type_L1_32_1_1_I_addr_type_L1_32_1_1_W_addr_type_L1_5_288_8_8_O_addr_type_L2_312_8_8_I_addr_type_L2_1728_8_8_W_addr_type_L2_5_8640_8_8_O_addr_type_L3_8640_8_8_I_addr_type_L3_55296_8_8_W_addr_type_L3_O_partial_000001.PE.rf_5_32_32_32_1_1_1_1_1_1_O_partial_type_O_addr_type_L1_I_type_I_addr_type_L1_W_type_W_addr_type_L1_run_inst, Module: topless_5comma_32comma_1comma_1comma_O_addr_type_L1comma_32comma_1comma_1comma_I_addr_type_L1comma_32comma_1comma_1comma_W_addr_type_L1comma_5comma_288comma_8comma_8comma_O_addr_type_L2comma_312comma_8comma_8comma_I_addr_type_L2c000003
 //            Source-relation: power_top_5_32_1_1_O_addr_type_L1_32_1_1_I_addr_type_L1_32_1_1_W_addr_type_L1_5_288_8_8_O_addr_type_L2_312_8_8_I_addr_type_L2_1728_8_8_W_addr_type_L2_5_8640_8_8_O_addr_type_L3_8640_8_8_I_addr_type_L3_55296_8_8_W_addr_type_L3_O_pa000000.v:3529
 //
 //            Area before justification: 1.596
 //            Area after  justification: 5.852( 266.667% increase )
 //
 //            Signals with hierarchical names need to have new hierarchy ports/signals created.

 // wire O_write_data_data_sva_en ; 


module cg_obs_topless_5comma_32comma_1comma_1comma_O_addr_type_L1comma_32comma_1comma_1comma_I_addr_type_L1comma_32comma_1comma_1comma_W_addr_type_L1comma_5comma_288comma_8comma_8comma_O_addr_type_L2comma_312comma_8comma_8comma_I_addr_type_L2c000003 ( rst
 , fsm_output , O_write_data_data_sva_en , land_9_lpi_1_dfm_1 ) ;
 input wire  rst ; 
 input wire  [1:0]  fsm_output ; 
 input wire  land_9_lpi_1_dfm_1 ; 
 output wire  O_write_data_data_sva_en ; 
 wire E_1 ; 
 wire E_2 ; 
 wire E_3 ; 
 wire  [0:0] E_4 ; 
 wire  [0:0] E_5 ; 
cg_db_obs_topless_5comma_32comma_1comma_1comma_O_addr_type_L1comma_32comma_1comma_1comma_I_addr_type_L1comma_32comma_1comma_1comma_W_addr_type_L1comma_5comma_288comma_8comma_8comma_O_addr_type_L2comma_312comma_8comma_8comma_I_addr_type_L2c000003  inst_cg_db_obs_topless_5comma_32comma_1c ( 
		.land_9_lpi_1_dfm_1_1_d ( E_2 )  , .reg_W_instr_in_rsci_oswt_cse_1_d ( E_1 )  , 
		.O_write_data_data_sva_en ( O_write_data_data_sva_en )  );
  assign /* unsigned    bit */  E_1 = ( rst ? E_5 : E_3 ) ;
  assign /* unsigned    bit */  E_3 = ( ~E_4 ) ;
  assign /* unsigned  1-bit */  E_4 = fsm_output [1]  ;
  assign /* unsigned  1-bit */  E_5 = 1'h0;
  assign /* unsigned    bit */  E_2 = ( rst ? E_5 : land_9_lpi_1_dfm_1 ) ;
endmodule

module cg_db_obs_topless_5comma_32comma_1comma_1comma_O_addr_type_L1comma_32comma_1comma_1comma_I_addr_type_L1comma_32comma_1comma_1comma_W_addr_type_L1comma_5comma_288comma_8comma_8comma_O_addr_type_L2comma_312comma_8comma_8comma_I_addr_type_L2c000003 ( land_9_lpi_1_dfm_1_1_d
 , reg_W_instr_in_rsci_oswt_cse_1_d , O_write_data_data_sva_en ) ;
 input wire  land_9_lpi_1_dfm_1_1_d ; 
 input wire  reg_W_instr_in_rsci_oswt_cse_1_d ; 
 output wire  O_write_data_data_sva_en ; 
 wire E_1 ; 
  assign /* unsigned    bit */  O_write_data_data_sva_en = (E_1 | reg_W_instr_in_rsci_oswt_cse_1_d) ;
  assign /* unsigned    bit */  E_1 = ( !land_9_lpi_1_dfm_1_1_d ) ;
  function convertXtoHigh;
   input in_en;
   if(in_en == 1'b0)
     convertXtoHigh = 1'b0;
   else
     convertXtoHigh = 1'b1;
  endfunction
endmodule


 // QuickLink: Instance: top_5_32_1_1_O_addr_type_L1_32_1_1_I_addr_type_L1_32_1_1_W_addr_type_L1_5_288_8_8_O_addr_type_L2_312_8_8_I_addr_type_L2_1728_8_8_W_addr_type_L2_5_8640_8_8_O_addr_type_L3_8640_8_8_I_addr_type_L3_55296_8_8_W_addr_type_L3_O_partial_000001.PE.rf_5_32_32_32_1_1_1_1_1_1_O_partial_type_O_addr_type_L1_I_type_I_addr_type_L1_W_type_W_addr_type_L1_run_inst, Module: topless_5comma_32comma_1comma_1comma_O_addr_type_L1comma_32comma_1comma_1comma_I_addr_type_L1comma_32comma_1comma_1comma_W_addr_type_L1comma_5comma_288comma_8comma_8comma_O_addr_type_L2comma_312comma_8comma_8comma_I_addr_type_L2c000003
 //            Source-relation: power_top_5_32_1_1_O_addr_type_L1_32_1_1_I_addr_type_L1_32_1_1_W_addr_type_L1_5_288_8_8_O_addr_type_L2_312_8_8_I_addr_type_L2_1728_8_8_W_addr_type_L2_5_8640_8_8_O_addr_type_L3_8640_8_8_I_addr_type_L3_55296_8_8_W_addr_type_L3_O_pa000000.v:3529
 //
 //            Area before justification: 296.418
 //            Area after  justification: 544.064( 83.5463% increase )
 //
 //            Signals with hierarchical names need to have new hierarchy ports/signals created.

 // wire O_mac_counter_4_sva_en ; 

 // wire O_vld_zg_pntr_sva_en ; 

 // wire O_mac_pntr_sva_en ; 

 // wire I_mac_counter_1_sva_en ; 

 // wire I_mac_counter_2_sva_en ; 

 // wire I_mac_counter_3_sva_en ; 

 // wire W_mac_counter_4_sva_en ; 

 // wire W_mac_counter_1_sva_en ; 

 // wire W_mac_counter_2_sva_en ; 

 // wire I_mac_counter_0_sva_en ; 

 // wire O_mac_tile_bound_2_lpi_1_en ; 

 // wire O_mac_tile_bound_0_lpi_1_en ; 

 // wire O_mac_tile_bound_3_lpi_1_en ; 

 // wire O_mac_tile_bound_4_lpi_1_en ; 

 // wire O_mac_tile_bound_1_lpi_1_en ; 

 // wire I_mac_tile_bound_3_lpi_1_en ; 

 // wire I_mac_tile_bound_4_lpi_1_en ; 

 // wire W_mac_tile_bound_4_lpi_1_en ; 

 // wire I_mac_tile_bound_2_lpi_1_en ; 


module cg_const_stb_topless_5comma_32comma_1comma_1comma_O_addr_type_L1comma_32comma_1comma_1comma_I_addr_type_L1comma_32comma_1comma_1comma_W_addr_type_L1comma_5comma_288comma_8comma_8comma_O_addr_type_L2comma_312comma_8comma_8comma_I_addr_type_L2c000003 ( tile_bound_out
 , counter_out , run_wen , fsm_output , O_mac_counter_4_sva_en , O_vld_zg_pntr_sva_en
 , O_mac_pntr_sva_en , I_mac_counter_1_sva_en , I_mac_counter_2_sva_en , I_mac_counter_3_sva_en
 , W_mac_counter_4_sva_en , W_mac_counter_1_sva_en , W_mac_counter_2_sva_en
 , I_mac_counter_0_sva_en , O_mac_tile_bound_2_lpi_1_en , O_mac_tile_bound_0_lpi_1_en
 , O_mac_tile_bound_3_lpi_1_en , O_mac_tile_bound_4_lpi_1_en , O_mac_tile_bound_1_lpi_1_en
 , I_mac_tile_bound_3_lpi_1_en , I_mac_tile_bound_4_lpi_1_en , W_mac_tile_bound_4_lpi_1_en
 , I_mac_tile_bound_2_lpi_1_en , counter_or_nl , counter_nand_nl , counter_nand_2_nl
 , counter_nand_1_nl , counter_nand_3_nl , ppro_reset_CLOCKclk_out_port , W_mac_pntr_and_cse
 , mux_614_nl , mux_44_nl , tile_pntr_nand_nl , counter_out_2 , O_mac_tile_bound_2_lpi_1_dfm_mx0
 , reg_W_instr_in_rsci_oswt_cse_1 , and_395_cse , O_mac_tile_bound_0_lpi_1_dfm_mx0
 , O_mac_tile_bound_3_lpi_1_dfm_mx0 , O_mac_tile_bound_4_lpi_1_dfm_mx0 , O_mac_tile_bound_1_lpi_1_dfm_mx0
 , tile_bound_out_3 , I_mac_tile_bound_3_lpi_1_dfm_mx0 , I_mac_tile_bound_4_lpi_1_dfm_mx0
 , W_mac_tile_bound_4_lpi_1_dfm_mx0 , tile_bound_out_2 , I_mac_tile_bound_2_lpi_1_dfm_mx0
 , mux_tmp_76 , if_6_or_itm , if_6_if_if_not_5_nl , clk , rst ) ;
 input wire  [24:0]  tile_bound_out ; 
 input wire  [24:0]  counter_out ; 
 input wire  run_wen ; 
 input wire  [1:0]  fsm_output ; 
 input wire  [0:0]  counter_or_nl ; 
 input wire  [0:0]  counter_nand_nl ; 
 input wire  [0:0]  counter_nand_2_nl ; 
 input wire  [0:0]  counter_nand_1_nl ; 
 input wire  [0:0]  counter_nand_3_nl ; 
 input wire  ppro_reset_CLOCKclk_out_port ; 
 input wire  W_mac_pntr_and_cse ; 
 input wire  [0:0]  mux_614_nl ; 
 input wire  [0:0]  mux_44_nl ; 
 input wire  [0:0]  tile_pntr_nand_nl ; 
 input wire  [24:0]  counter_out_2 ; 
 input wire  [4:0]  O_mac_tile_bound_2_lpi_1_dfm_mx0 ; 
 input wire  reg_W_instr_in_rsci_oswt_cse_1 ; 
 input wire  and_395_cse ; 
 input wire  [4:0]  O_mac_tile_bound_0_lpi_1_dfm_mx0 ; 
 input wire  [4:0]  O_mac_tile_bound_3_lpi_1_dfm_mx0 ; 
 input wire  [4:0]  O_mac_tile_bound_4_lpi_1_dfm_mx0 ; 
 input wire  [4:0]  O_mac_tile_bound_1_lpi_1_dfm_mx0 ; 
 input wire  [24:0]  tile_bound_out_3 ; 
 input wire  [4:0]  I_mac_tile_bound_3_lpi_1_dfm_mx0 ; 
 input wire  [4:0]  I_mac_tile_bound_4_lpi_1_dfm_mx0 ; 
 input wire  [4:0]  W_mac_tile_bound_4_lpi_1_dfm_mx0 ; 
 input wire  [24:0]  tile_bound_out_2 ; 
 input wire  [4:0]  I_mac_tile_bound_2_lpi_1_dfm_mx0 ; 
 input wire  [0:0]  mux_tmp_76 ; 
 input wire  if_6_or_itm ; 
 input wire  [0:0]  if_6_if_if_not_5_nl ; 
 input wire  clk ; 
 input wire  rst ; 
 output wire  O_mac_counter_4_sva_en ; 
 output wire  O_vld_zg_pntr_sva_en ; 
 output wire  O_mac_pntr_sva_en ; 
 output wire  I_mac_counter_1_sva_en ; 
 output wire  I_mac_counter_2_sva_en ; 
 output wire  I_mac_counter_3_sva_en ; 
 output wire  W_mac_counter_4_sva_en ; 
 output wire  W_mac_counter_1_sva_en ; 
 output wire  W_mac_counter_2_sva_en ; 
 output wire  I_mac_counter_0_sva_en ; 
 output wire  O_mac_tile_bound_2_lpi_1_en ; 
 output wire  O_mac_tile_bound_0_lpi_1_en ; 
 output wire  O_mac_tile_bound_3_lpi_1_en ; 
 output wire  O_mac_tile_bound_4_lpi_1_en ; 
 output wire  O_mac_tile_bound_1_lpi_1_en ; 
 output wire  I_mac_tile_bound_3_lpi_1_en ; 
 output wire  I_mac_tile_bound_4_lpi_1_en ; 
 output wire  W_mac_tile_bound_4_lpi_1_en ; 
 output wire  I_mac_tile_bound_2_lpi_1_en ; 
 wire  [4:0] E_1 ; 
 wire  [4:0] E_2 ; 
 wire  [4:0] E_3 ; 
 wire  [4:0] E_4 ; 
 wire  [4:0] E_5 ; 
 wire  [4:0] E_6 ; 
 wire  [4:0] E_7 ; 
 wire  [4:0] E_8 ; 
 wire E_9 ; 
 wire  [4:0] E_10 ; 
 wire  [4:0] E_11 ; 
 wire  [4:0] E_12 ; 
 wire  [4:0] E_13 ; 
 wire  [4:0] E_14 ; 
 wire  [4:0] E_15 ; 
 wire  [4:0] E_16 ; 
 wire  [4:0] E_17 ; 
 wire E_18 ; 
 wire E_19 ; 
 wire  [4:0] E_20 ; 
 wire  [4:0] E_21 ; 
 wire  [4:0] E_22 ; 
 wire  [4:0] E_23 ; 
 wire  [4:0] E_24 ; 
 wire  [4:0] E_25 ; 
 wire  [4:0] E_26 ; 
 wire  [4:0] E_27 ; 
 wire  [4:0] E_28 ; 
 wire  [4:0] E_29 ; 
 wire  [4:0] E_30 ; 
 wire  [4:0] E_31 ; 
 wire  [4:0] E_32 ; 
 wire  [4:0] E_33 ; 
 wire  [4:0] E_34 ; 
 wire  [4:0] E_35 ; 
 wire  [4:0] E_36 ; 
 wire E_37 ; 
 wire E_38 ; 
 wire E_39 ; 
 wire E_40 ; 
 wire E_41 ; 
 wire E_42 ; 
 wire  [4:0] E_43 ; 
 wire  [4:0] E_44 ; 
 wire  [4:0] E_45 ; 
 wire  [4:0] E_46 ; 
 wire  [4:0] E_47 ; 
 wire  [4:0] E_48 ; 
 wire  [4:0] E_49 ; 
 wire  [4:0] E_50 ; 
 wire  [4:0] E_51 ; 
 wire E_52 ; 
 wire E_53 ; 
 wire E_54 ; 
 wire E_55 ; 
 wire  [0:0] E_56 ; 
 wire E_57 ; 
 wire E_58 ; 
 wire E_59 ; 
  assign /* unsigned  1-bit */  E_56 = fsm_output [0]  ;
  assign /* unsigned  5-bit */  E_45 = counter_out [ 4 : 0 ]  ;
  assign /* unsigned  5-bit */  E_36 = tile_bound_out_3 [ 4 : 0 ]  ;
cg_db_const_stb_topless_5comma_32comma_1comma_1comma_O_addr_type_L1comma_32comma_1comma_1comma_I_addr_type_L1comma_32comma_1comma_1comma_W_addr_type_L1comma_5comma_288comma_8comma_8comma_O_addr_type_L2comma_312comma_8comma_8comma_I_addr_type_L2c000003  inst_cg_db_const_stb_topless_5comma_32co ( 
		.counter_or_nl ( counter_or_nl )  , .counter_nand_nl ( counter_nand_nl )  , .counter_nand_2_nl_22969 ( counter_nand_2_nl )  , 
		.rst ( rst )  , .counter_nand_1_nl ( counter_nand_1_nl )  , .counter_nand_3_nl_23058 ( counter_nand_3_nl )  , 
		.ppro_reset_CLOCKclk_out_port ( ppro_reset_CLOCKclk_out_port )  , .clk ( clk )  , 
		.E_6917 ( E_19 )  , .O_mac_counter_4_sva_en ( O_mac_counter_4_sva_en )  , .if_6_if_if_not_5_nl ( if_6_if_if_not_5_nl )  , 
		.if_6_or_itm ( if_6_or_itm )  , .E_6612 ( E_18 )  , .O_vld_zg_pntr_sva_en ( O_vld_zg_pntr_sva_en )  , 
		.mux_44_nl ( mux_44_nl )  , .tile_pntr_nand_nl_22926 ( tile_pntr_nand_nl )  , .O_mac_pntr_sva_en ( O_mac_pntr_sva_en )  , 
		.n9671 ( E_17 )  , .I_mac_counter_1_sva_en ( I_mac_counter_1_sva_en )  , .n9665 ( E_16 )  , 
		.I_mac_counter_2_sva_en ( I_mac_counter_2_sva_en )  , .n9659 ( E_15 )  , .I_mac_counter_3_sva_en ( I_mac_counter_3_sva_en )  , 
		.n9623 ( E_14 )  , .W_mac_counter_4_sva_en ( W_mac_counter_4_sva_en )  , .n9641 ( E_13 )  , 
		.W_mac_counter_1_sva_en ( W_mac_counter_1_sva_en )  , .n9635 ( E_12 )  , .W_mac_counter_2_sva_en ( W_mac_counter_2_sva_en )  , 
		.n9677 ( E_11 )  , .I_mac_counter_0_sva_en ( I_mac_counter_0_sva_en )  , .n17552 ( E_10 )  , 
		.E_6465 ( E_9 )  , .O_mac_tile_bound_2_lpi_1_en ( O_mac_tile_bound_2_lpi_1_en )  , 
		.n17564 ( E_8 )  , .O_mac_tile_bound_0_lpi_1_en ( O_mac_tile_bound_0_lpi_1_en )  , 
		.n17546 ( E_7 )  , .O_mac_tile_bound_3_lpi_1_en ( O_mac_tile_bound_3_lpi_1_en )  , 
		.n17540 ( E_6 )  , .O_mac_tile_bound_4_lpi_1_en ( O_mac_tile_bound_4_lpi_1_en )  , 
		.n17558 ( E_5 )  , .O_mac_tile_bound_1_lpi_1_en ( O_mac_tile_bound_1_lpi_1_en )  , 
		.n17606 ( E_4 )  , .I_mac_tile_bound_3_lpi_1_en ( I_mac_tile_bound_3_lpi_1_en )  , 
		.n17600 ( E_3 )  , .I_mac_tile_bound_4_lpi_1_en ( I_mac_tile_bound_4_lpi_1_en )  , 
		.n17570 ( E_2 )  , .W_mac_tile_bound_4_lpi_1_en ( W_mac_tile_bound_4_lpi_1_en )  , 
		.n17612 ( E_1 )  , .I_mac_tile_bound_2_lpi_1_en ( I_mac_tile_bound_2_lpi_1_en )  );
  assign /* unsigned  5-bit */  E_1 = ( rst ? E_22 : E_20 ) ;
  assign /* unsigned  5-bit */  E_20 = ( mux_tmp_76 ? I_mac_tile_bound_2_lpi_1_dfm_mx0 : E_21 ) ;
  assign /* unsigned  5-bit */  E_21 = tile_bound_out [ 14 : 10 ]  ;
  assign /* unsigned  5-bit */  E_22 = 5'h00;
  assign /* unsigned  5-bit */  E_2 = ( rst ? E_22 : E_23 ) ;
  assign /* unsigned  5-bit */  E_23 = ( mux_tmp_76 ? W_mac_tile_bound_4_lpi_1_dfm_mx0 : E_24 ) ;
  assign /* unsigned  5-bit */  E_24 = tile_bound_out_2 [ 24 : 20 ]  ;
  assign /* unsigned  5-bit */  E_3 = ( rst ? E_22 : E_25 ) ;
  assign /* unsigned  5-bit */  E_25 = ( mux_tmp_76 ? I_mac_tile_bound_4_lpi_1_dfm_mx0 : E_26 ) ;
  assign /* unsigned  5-bit */  E_26 = tile_bound_out [ 24 : 20 ]  ;
  assign /* unsigned  5-bit */  E_4 = ( rst ? E_22 : E_27 ) ;
  assign /* unsigned  5-bit */  E_27 = ( mux_tmp_76 ? I_mac_tile_bound_3_lpi_1_dfm_mx0 : E_28 ) ;
  assign /* unsigned  5-bit */  E_28 = tile_bound_out [ 19 : 15 ]  ;
  assign /* unsigned  5-bit */  E_5 = ( rst ? E_22 : E_29 ) ;
  assign /* unsigned  5-bit */  E_29 = ( mux_tmp_76 ? O_mac_tile_bound_1_lpi_1_dfm_mx0 : E_30 ) ;
  assign /* unsigned  5-bit */  E_30 = tile_bound_out_3 [ 9 : 5 ]  ;
  assign /* unsigned  5-bit */  E_6 = ( rst ? E_22 : E_31 ) ;
  assign /* unsigned  5-bit */  E_31 = ( mux_tmp_76 ? O_mac_tile_bound_4_lpi_1_dfm_mx0 : E_32 ) ;
  assign /* unsigned  5-bit */  E_32 = tile_bound_out_3 [ 24 : 20 ]  ;
  assign /* unsigned  5-bit */  E_7 = ( rst ? E_22 : E_33 ) ;
  assign /* unsigned  5-bit */  E_33 = ( mux_tmp_76 ? O_mac_tile_bound_3_lpi_1_dfm_mx0 : E_34 ) ;
  assign /* unsigned  5-bit */  E_34 = tile_bound_out_3 [ 19 : 15 ]  ;
  assign /* unsigned  5-bit */  E_8 = ( rst ? E_22 : E_35 ) ;
  assign /* unsigned  5-bit */  E_35 = ( mux_tmp_76 ? O_mac_tile_bound_0_lpi_1_dfm_mx0 : E_36 ) ;
  assign /* unsigned    bit */  E_9 = (E_37 & E_38) ;
  assign /* unsigned    bit */  E_37 = (rst | and_395_cse) ;
  assign /* unsigned    bit */  E_38 = (E_39 | reg_W_instr_in_rsci_oswt_cse_1) ;
  assign /* unsigned    bit */  E_39 = (E_40 | E_42) ;
  assign /* unsigned    bit */  E_40 = (rst | E_41) ;
  assign /* unsigned    bit */  E_41 = ( !and_395_cse ) ;
  assign /* unsigned    bit */  E_42 = ( !mux_tmp_76 ) ;
  assign /* unsigned  5-bit */  E_10 = ( rst ? E_22 : E_43 ) ;
  assign /* unsigned  5-bit */  E_43 = ( mux_tmp_76 ? O_mac_tile_bound_2_lpi_1_dfm_mx0 : E_44 ) ;
  assign /* unsigned  5-bit */  E_44 = tile_bound_out_3 [ 14 : 10 ]  ;
  assign /* unsigned  5-bit */  E_11 = ( rst ? E_22 : E_45 ) ;
  assign /* unsigned  5-bit */  E_12 = ( rst ? E_22 : E_46 ) ;
  assign /* unsigned  5-bit */  E_46 = counter_out_2 [ 14 : 10 ]  ;
  assign /* unsigned  5-bit */  E_13 = ( rst ? E_22 : E_47 ) ;
  assign /* unsigned  5-bit */  E_47 = counter_out_2 [ 9 : 5 ]  ;
  assign /* unsigned  5-bit */  E_14 = ( rst ? E_22 : E_48 ) ;
  assign /* unsigned  5-bit */  E_48 = counter_out_2 [ 24 : 20 ]  ;
  assign /* unsigned  5-bit */  E_15 = ( rst ? E_22 : E_49 ) ;
  assign /* unsigned  5-bit */  E_49 = counter_out [ 19 : 15 ]  ;
  assign /* unsigned  5-bit */  E_16 = ( rst ? E_22 : E_50 ) ;
  assign /* unsigned  5-bit */  E_50 = counter_out [ 14 : 10 ]  ;
  assign /* unsigned  5-bit */  E_17 = ( rst ? E_22 : E_51 ) ;
  assign /* unsigned  5-bit */  E_51 = counter_out [ 9 : 5 ]  ;
  assign /* unsigned    bit */  E_18 = (E_52 & E_57) ;
  assign /* unsigned    bit */  E_52 = (rst | E_53) ;
  assign /* unsigned    bit */  E_53 = (E_54 & E_55) ;
  assign /* unsigned    bit */  E_54 = (mux_614_nl & run_wen) ;
  assign /* unsigned    bit */  E_55 = ( ~E_56 ) ;
  assign /* unsigned    bit */  E_57 = (E_58 | if_6_or_itm) ;
  assign /* unsigned    bit */  E_58 = (rst | E_59) ;
  assign /* unsigned    bit */  E_59 = ( !E_53 ) ;
  assign /* unsigned    bit */  E_19 = (rst | W_mac_pntr_and_cse) ;
endmodule

module cg_db_const_stb_topless_5comma_32comma_1comma_1comma_O_addr_type_L1comma_32comma_1comma_1comma_I_addr_type_L1comma_32comma_1comma_1comma_W_addr_type_L1comma_5comma_288comma_8comma_8comma_O_addr_type_L2comma_312comma_8comma_8comma_I_addr_type_L2c000003 ( counter_or_nl
 , counter_nand_nl , counter_nand_2_nl_22969 , rst , counter_nand_1_nl , counter_nand_3_nl_23058
 , ppro_reset_CLOCKclk_out_port , clk , E_6917 , O_mac_counter_4_sva_en , if_6_if_if_not_5_nl
 , if_6_or_itm , E_6612 , O_vld_zg_pntr_sva_en , mux_44_nl , tile_pntr_nand_nl_22926
 , O_mac_pntr_sva_en , n9671 , I_mac_counter_1_sva_en , n9665 , I_mac_counter_2_sva_en
 , n9659 , I_mac_counter_3_sva_en , n9623 , W_mac_counter_4_sva_en , n9641 , W_mac_counter_1_sva_en
 , n9635 , W_mac_counter_2_sva_en , n9677 , I_mac_counter_0_sva_en , n17552 , E_6465
 , O_mac_tile_bound_2_lpi_1_en , n17564 , O_mac_tile_bound_0_lpi_1_en , n17546
 , O_mac_tile_bound_3_lpi_1_en , n17540 , O_mac_tile_bound_4_lpi_1_en , n17558
 , O_mac_tile_bound_1_lpi_1_en , n17606 , I_mac_tile_bound_3_lpi_1_en , n17600
 , I_mac_tile_bound_4_lpi_1_en , n17570 , W_mac_tile_bound_4_lpi_1_en , n17612
 , I_mac_tile_bound_2_lpi_1_en ) ;
 input wire  [0:0]  counter_or_nl ; 
 input wire  [0:0]  counter_nand_nl ; 
 input wire  [0:0]  counter_nand_2_nl_22969 ; 
 input wire  rst ; 
 input wire  [0:0]  counter_nand_1_nl ; 
 input wire  [0:0]  counter_nand_3_nl_23058 ; 
 input wire  ppro_reset_CLOCKclk_out_port ; 
 input wire  clk ; 
 input wire  E_6917 ; 
 input wire  [0:0]  if_6_if_if_not_5_nl ; 
 input wire  if_6_or_itm ; 
 input wire  E_6612 ; 
 input wire  [0:0]  mux_44_nl ; 
 input wire  [0:0]  tile_pntr_nand_nl_22926 ; 
 input wire  [4:0]  n9671 ; 
 input wire  [4:0]  n9665 ; 
 input wire  [4:0]  n9659 ; 
 input wire  [4:0]  n9623 ; 
 input wire  [4:0]  n9641 ; 
 input wire  [4:0]  n9635 ; 
 input wire  [4:0]  n9677 ; 
 input wire  [4:0]  n17552 ; 
 input wire  E_6465 ; 
 input wire  [4:0]  n17564 ; 
 input wire  [4:0]  n17546 ; 
 input wire  [4:0]  n17540 ; 
 input wire  [4:0]  n17558 ; 
 input wire  [4:0]  n17606 ; 
 input wire  [4:0]  n17600 ; 
 input wire  [4:0]  n17570 ; 
 input wire  [4:0]  n17612 ; 
 output wire  O_mac_counter_4_sva_en ; 
 output wire  O_vld_zg_pntr_sva_en ; 
 output wire  O_mac_pntr_sva_en ; 
 output wire  I_mac_counter_1_sva_en ; 
 output wire  I_mac_counter_2_sva_en ; 
 output wire  I_mac_counter_3_sva_en ; 
 output wire  W_mac_counter_4_sva_en ; 
 output wire  W_mac_counter_1_sva_en ; 
 output wire  W_mac_counter_2_sva_en ; 
 output wire  I_mac_counter_0_sva_en ; 
 output wire  O_mac_tile_bound_2_lpi_1_en ; 
 output wire  O_mac_tile_bound_0_lpi_1_en ; 
 output wire  O_mac_tile_bound_3_lpi_1_en ; 
 output wire  O_mac_tile_bound_4_lpi_1_en ; 
 output wire  O_mac_tile_bound_1_lpi_1_en ; 
 output wire  I_mac_tile_bound_3_lpi_1_en ; 
 output wire  I_mac_tile_bound_4_lpi_1_en ; 
 output wire  W_mac_tile_bound_4_lpi_1_en ; 
 output wire  I_mac_tile_bound_2_lpi_1_en ; 
 wire E_1 ; 
 reg Cflop_96_O_mac_counter_0_sva0 ; 
 wire E_2 ; 
 wire E_3 ; 
 wire E_4 ; 
 wire E_5 ; 
 wire E_6 ; 
 wire E_7 ; 
 wire E_8 ; 
 wire E_9 ; 
 wire E_10 ; 
 wire E_11 ; 
 reg Cflop_96_O_vld_zg_pntr_sva0 ; 
 wire E_12 ; 
 wire E_13 ; 
 wire E_14 ; 
 wire E_15 ; 
 wire E_16 ; 
 wire E_17 ; 
 wire E_18 ; 
 reg Cflop_96_O_mac_pntr_sva0 ; 
 wire E_19 ; 
 wire E_20 ; 
 wire E_21 ; 
 wire E_22 ; 
 wire E_23 ; 
 wire E_24 ; 
 reg Cflop_96_I_mac_counter_1_sva0 ; 
 wire E_25 ; 
 wire E_26 ; 
 wire E_27 ; 
 reg Cflop_96_I_mac_counter_2_sva0 ; 
 wire E_28 ; 
 wire E_29 ; 
 wire E_30 ; 
 reg Cflop_96_I_mac_counter_3_sva0 ; 
 wire E_31 ; 
 wire E_32 ; 
 wire E_33 ; 
 reg Cflop_96_W_mac_counter_4_sva0 ; 
 wire E_34 ; 
 wire E_35 ; 
 wire E_36 ; 
 reg Cflop_96_W_mac_counter_1_sva0 ; 
 wire E_37 ; 
 wire E_38 ; 
 wire E_39 ; 
 reg Cflop_96_W_mac_counter_2_sva0 ; 
 wire E_40 ; 
 wire E_41 ; 
 wire E_42 ; 
 reg Cflop_96_I_mac_counter_0_sva0 ; 
 wire E_43 ; 
 wire E_44 ; 
 wire  [4:0] E_45 ; 
 wire E_46 ; 
 reg Cflop_96_O_mac_tile_bound_2_lpi_11 ; 
 wire E_47 ; 
 wire E_48 ; 
 wire E_49 ; 
 wire E_50 ; 
 reg Cflop_96_O_mac_tile_bound_0_lpi_11 ; 
 wire E_51 ; 
 wire E_52 ; 
 wire E_53 ; 
 reg Cflop_96_O_mac_tile_bound_3_lpi_11 ; 
 wire E_54 ; 
 wire E_55 ; 
 wire E_56 ; 
 reg Cflop_96_O_mac_tile_bound_4_lpi_11 ; 
 wire E_57 ; 
 wire E_58 ; 
 wire E_59 ; 
 reg Cflop_96_O_mac_tile_bound_1_lpi_11 ; 
 wire E_60 ; 
 wire E_61 ; 
 wire  [4:0] E_62 ; 
 wire E_63 ; 
 reg Cflop_96_I_mac_tile_bound_3_lpi_117 ; 
 wire E_64 ; 
 wire E_65 ; 
 wire E_66 ; 
 reg Cflop_96_I_mac_tile_bound_4_lpi_117 ; 
 wire E_67 ; 
 wire E_68 ; 
 wire  [4:0] E_69 ; 
 wire E_70 ; 
 reg Cflop_96_W_mac_tile_bound_4_lpi_118 ; 
 wire E_71 ; 
 wire E_72 ; 
 wire  [4:0] E_73 ; 
 wire E_74 ; 
 reg Cflop_96_I_mac_tile_bound_2_lpi_127 ; 
 wire E_75 ; 
 wire E_76 ; 
 wire  [4:0] E_77 ; 
  assign /* unsigned    bit */  O_mac_counter_4_sva_en = ( ~E_1 ) ;
  assign /* unsigned    bit */  E_1 = (Cflop_96_O_mac_counter_0_sva0 & E_3) ;

  always @( posedge clk )
    if(E_10)
      begin
          Cflop_96_O_mac_counter_0_sva0 <= E_2; 
      end
  assign /* unsigned    bit */  E_2 = (E_3 & E_9) ;
  assign /* unsigned    bit */  E_3 = ( !E_4 ) ;
  assign /* unsigned    bit */  E_4 = (E_5 | E_7) ;
  assign /* unsigned    bit */  E_5 = (counter_or_nl | E_6) ;
  assign /* unsigned    bit */  E_6 = (counter_nand_nl | counter_nand_2_nl_22969) ;
  assign /* unsigned    bit */  E_7 = (rst | E_8) ;
  assign /* unsigned    bit */  E_8 = (counter_nand_1_nl | counter_nand_3_nl_23058) ;
  assign /* unsigned    bit */  E_9 = ( ~ppro_reset_CLOCKclk_out_port ) ;
  assign /* unsigned    bit */  E_10 = (E_6917 | ppro_reset_CLOCKclk_out_port) ;
  assign /* unsigned    bit */  O_vld_zg_pntr_sva_en = ( ~E_11 ) ;
  assign /* unsigned    bit */  E_11 = (Cflop_96_O_vld_zg_pntr_sva0 & E_13) ;

  always @( posedge clk )
    if(E_17)
      begin
          Cflop_96_O_vld_zg_pntr_sva0 <= E_12; 
      end
  assign /* unsigned    bit */  E_12 = (E_13 & E_9) ;
  assign /* unsigned    bit */  E_13 = ( !E_14 ) ;
  assign /* unsigned    bit */  E_14 = (rst | E_15) ;
  assign /* unsigned    bit */  E_15 = (if_6_if_if_not_5_nl | E_16) ;
  assign /* unsigned    bit */  E_16 = ( !if_6_or_itm ) ;
  assign /* unsigned    bit */  E_17 = (E_6612 | ppro_reset_CLOCKclk_out_port) ;
  assign /* unsigned    bit */  O_mac_pntr_sva_en = ( ~E_18 ) ;
  assign /* unsigned    bit */  E_18 = (Cflop_96_O_mac_pntr_sva0 & E_20) ;

  always @( posedge clk )
    if(E_10)
      begin
          Cflop_96_O_mac_pntr_sva0 <= E_19; 
      end
  assign /* unsigned    bit */  E_19 = (E_20 & E_9) ;
  assign /* unsigned    bit */  E_20 = ( !E_21 ) ;
  assign /* unsigned    bit */  E_21 = (rst | E_22) ;
  assign /* unsigned    bit */  E_22 = (E_23 | tile_pntr_nand_nl_22926) ;
  assign /* unsigned    bit */  E_23 = ( !mux_44_nl ) ;
  assign /* unsigned    bit */  I_mac_counter_1_sva_en = ( ~E_24 ) ;
  assign /* unsigned    bit */  E_24 = (Cflop_96_I_mac_counter_1_sva0 & E_26) ;

  always @( posedge clk )
    if(E_10)
      begin
          Cflop_96_I_mac_counter_1_sva0 <= E_25; 
      end
  assign /* unsigned    bit */  E_25 = (E_26 & E_9) ;
  assign /* unsigned    bit */  E_26 = (n9671 == E_45) ;
  assign /* unsigned    bit */  I_mac_counter_2_sva_en = ( ~E_27 ) ;
  assign /* unsigned    bit */  E_27 = (Cflop_96_I_mac_counter_2_sva0 & E_29) ;

  always @( posedge clk )
    if(E_10)
      begin
          Cflop_96_I_mac_counter_2_sva0 <= E_28; 
      end
  assign /* unsigned    bit */  E_28 = (E_29 & E_9) ;
  assign /* unsigned    bit */  E_29 = (n9665 == E_45) ;
  assign /* unsigned    bit */  I_mac_counter_3_sva_en = ( ~E_30 ) ;
  assign /* unsigned    bit */  E_30 = (Cflop_96_I_mac_counter_3_sva0 & E_32) ;

  always @( posedge clk )
    if(E_10)
      begin
          Cflop_96_I_mac_counter_3_sva0 <= E_31; 
      end
  assign /* unsigned    bit */  E_31 = (E_32 & E_9) ;
  assign /* unsigned    bit */  E_32 = (n9659 == E_45) ;
  assign /* unsigned    bit */  W_mac_counter_4_sva_en = ( ~E_33 ) ;
  assign /* unsigned    bit */  E_33 = (Cflop_96_W_mac_counter_4_sva0 & E_35) ;

  always @( posedge clk )
    if(E_10)
      begin
          Cflop_96_W_mac_counter_4_sva0 <= E_34; 
      end
  assign /* unsigned    bit */  E_34 = (E_35 & E_9) ;
  assign /* unsigned    bit */  E_35 = (n9623 == E_45) ;
  assign /* unsigned    bit */  W_mac_counter_1_sva_en = ( ~E_36 ) ;
  assign /* unsigned    bit */  E_36 = (Cflop_96_W_mac_counter_1_sva0 & E_38) ;

  always @( posedge clk )
    if(E_10)
      begin
          Cflop_96_W_mac_counter_1_sva0 <= E_37; 
      end
  assign /* unsigned    bit */  E_37 = (E_38 & E_9) ;
  assign /* unsigned    bit */  E_38 = (n9641 == E_45) ;
  assign /* unsigned    bit */  W_mac_counter_2_sva_en = ( ~E_39 ) ;
  assign /* unsigned    bit */  E_39 = (Cflop_96_W_mac_counter_2_sva0 & E_41) ;

  always @( posedge clk )
    if(E_10)
      begin
          Cflop_96_W_mac_counter_2_sva0 <= E_40; 
      end
  assign /* unsigned    bit */  E_40 = (E_41 & E_9) ;
  assign /* unsigned    bit */  E_41 = (n9635 == E_45) ;
  assign /* unsigned    bit */  I_mac_counter_0_sva_en = ( ~E_42 ) ;
  assign /* unsigned    bit */  E_42 = (Cflop_96_I_mac_counter_0_sva0 & E_44) ;

  always @( posedge clk )
    if(E_10)
      begin
          Cflop_96_I_mac_counter_0_sva0 <= E_43; 
      end
  assign /* unsigned    bit */  E_43 = (E_44 & E_9) ;
  assign /* unsigned    bit */  E_44 = (n9677 == E_45) ;
  assign /* unsigned  5-bit */  E_45 = 5'h00;
  assign /* unsigned    bit */  O_mac_tile_bound_2_lpi_1_en = ( ~E_46 ) ;
  assign /* unsigned    bit */  E_46 = (Cflop_96_O_mac_tile_bound_2_lpi_11 & E_48) ;

  always @( posedge clk )
    if(E_49)
      begin
          Cflop_96_O_mac_tile_bound_2_lpi_11 <= E_47; 
      end
  assign /* unsigned    bit */  E_47 = (E_48 & E_9) ;
  assign /* unsigned    bit */  E_48 = (n17552 == E_62) ;
  assign /* unsigned    bit */  E_49 = (E_6465 | ppro_reset_CLOCKclk_out_port) ;
  assign /* unsigned    bit */  O_mac_tile_bound_0_lpi_1_en = ( ~E_50 ) ;
  assign /* unsigned    bit */  E_50 = (Cflop_96_O_mac_tile_bound_0_lpi_11 & E_52) ;

  always @( posedge clk )
    if(E_49)
      begin
          Cflop_96_O_mac_tile_bound_0_lpi_11 <= E_51; 
      end
  assign /* unsigned    bit */  E_51 = (E_52 & E_9) ;
  assign /* unsigned    bit */  E_52 = (n17564 == E_62) ;
  assign /* unsigned    bit */  O_mac_tile_bound_3_lpi_1_en = ( ~E_53 ) ;
  assign /* unsigned    bit */  E_53 = (Cflop_96_O_mac_tile_bound_3_lpi_11 & E_55) ;

  always @( posedge clk )
    if(E_49)
      begin
          Cflop_96_O_mac_tile_bound_3_lpi_11 <= E_54; 
      end
  assign /* unsigned    bit */  E_54 = (E_55 & E_9) ;
  assign /* unsigned    bit */  E_55 = (n17546 == E_62) ;
  assign /* unsigned    bit */  O_mac_tile_bound_4_lpi_1_en = ( ~E_56 ) ;
  assign /* unsigned    bit */  E_56 = (Cflop_96_O_mac_tile_bound_4_lpi_11 & E_58) ;

  always @( posedge clk )
    if(E_49)
      begin
          Cflop_96_O_mac_tile_bound_4_lpi_11 <= E_57; 
      end
  assign /* unsigned    bit */  E_57 = (E_58 & E_9) ;
  assign /* unsigned    bit */  E_58 = (n17540 == E_62) ;
  assign /* unsigned    bit */  O_mac_tile_bound_1_lpi_1_en = ( ~E_59 ) ;
  assign /* unsigned    bit */  E_59 = (Cflop_96_O_mac_tile_bound_1_lpi_11 & E_61) ;

  always @( posedge clk )
    if(E_49)
      begin
          Cflop_96_O_mac_tile_bound_1_lpi_11 <= E_60; 
      end
  assign /* unsigned    bit */  E_60 = (E_61 & E_9) ;
  assign /* unsigned    bit */  E_61 = (n17558 == E_62) ;
  assign /* unsigned  5-bit */  E_62 = 5'h01;
  assign /* unsigned    bit */  I_mac_tile_bound_3_lpi_1_en = ( ~E_63 ) ;
  assign /* unsigned    bit */  E_63 = (Cflop_96_I_mac_tile_bound_3_lpi_117 & E_65) ;

  always @( posedge clk )
    if(E_49)
      begin
          Cflop_96_I_mac_tile_bound_3_lpi_117 <= E_64; 
      end
  assign /* unsigned    bit */  E_64 = (E_65 & E_9) ;
  assign /* unsigned    bit */  E_65 = (n17606 == E_69) ;
  assign /* unsigned    bit */  I_mac_tile_bound_4_lpi_1_en = ( ~E_66 ) ;
  assign /* unsigned    bit */  E_66 = (Cflop_96_I_mac_tile_bound_4_lpi_117 & E_68) ;

  always @( posedge clk )
    if(E_49)
      begin
          Cflop_96_I_mac_tile_bound_4_lpi_117 <= E_67; 
      end
  assign /* unsigned    bit */  E_67 = (E_68 & E_9) ;
  assign /* unsigned    bit */  E_68 = (n17600 == E_69) ;
  assign /* unsigned  5-bit */  E_69 = 5'h11;
  assign /* unsigned    bit */  W_mac_tile_bound_4_lpi_1_en = ( ~E_70 ) ;
  assign /* unsigned    bit */  E_70 = (Cflop_96_W_mac_tile_bound_4_lpi_118 & E_72) ;

  always @( posedge clk )
    if(E_49)
      begin
          Cflop_96_W_mac_tile_bound_4_lpi_118 <= E_71; 
      end
  assign /* unsigned    bit */  E_71 = (E_72 & E_9) ;
  assign /* unsigned    bit */  E_72 = (n17570 == E_73) ;
  assign /* unsigned  5-bit */  E_73 = 5'h12;
  assign /* unsigned    bit */  I_mac_tile_bound_2_lpi_1_en = ( ~E_74 ) ;
  assign /* unsigned    bit */  E_74 = (Cflop_96_I_mac_tile_bound_2_lpi_127 & E_76) ;

  always @( posedge clk )
    if(E_49)
      begin
          Cflop_96_I_mac_tile_bound_2_lpi_127 <= E_75; 
      end
  assign /* unsigned    bit */  E_75 = (E_76 & E_9) ;
  assign /* unsigned    bit */  E_76 = (n17612 == E_77) ;
  assign /* unsigned  5-bit */  E_77 = 5'h1b;
  function convertXtoHigh;
   input in_en;
   if(in_en == 1'b0)
     convertXtoHigh = 1'b0;
   else
     convertXtoHigh = 1'b1;
  endfunction
endmodule


 // QuickLink: Module: top_5_32_1_1_O_addr_type_L1_32_1_1_I_addr_type_L1_32_1_1_W_addr_type_L1_5_288_8_8_O_addr_type_L2_312_8_8_I_addr_type_L2_1728_8_8_W_addr_type_L2_5_8640_8_8_O_addr_type_L3_8640_8_8_I_addr_type_L3_55296_8_8_W_addr_type_L3_O_partial_000000
 //            Source-relation: power_top_5_32_1_1_O_addr_type_L1_32_1_1_I_addr_type_L1_32_1_1_W_addr_type_L1_5_288_8_8_O_addr_type_L2_312_8_8_I_addr_type_L2_1728_8_8_W_addr_type_L2_5_8640_8_8_O_addr_type_L3_8640_8_8_I_addr_type_L3_55296_8_8_W_addr_type_L3_O_pa000000.v:7881
 //
 //            Area before justification: 0
 //            Area after  justification: 0( 0% increase )
 //
 //            Signals with hierarchical names need to have new hierarchy ports/signals created.

 // wire ppro_reset_CLOCKclk_out_port ; 


module top_5_32_1_1_O_addr_type_L1_32_1_1_I_addr_type_L1_32_1_1_W_addr_type_L1_5_288_8_8_O_addr_type_L2_312_8_8_I_addr_type_L2_1728_8_8_W_addr_type_L2_5_8640_8_8_O_addr_type_L3_8640_8_8_I_addr_type_L3_55296_8_8_W_addr_type_L3_O_partial_000000_powerpro_reset_mod ( rst
 , ppro_reset_CLOCKclk_out_port ) ;
 input wire  rst ; 
 output wire  ppro_reset_CLOCKclk_out_port ; 
assign ppro_reset_CLOCKclk_out_port = rst ;
endmodule

