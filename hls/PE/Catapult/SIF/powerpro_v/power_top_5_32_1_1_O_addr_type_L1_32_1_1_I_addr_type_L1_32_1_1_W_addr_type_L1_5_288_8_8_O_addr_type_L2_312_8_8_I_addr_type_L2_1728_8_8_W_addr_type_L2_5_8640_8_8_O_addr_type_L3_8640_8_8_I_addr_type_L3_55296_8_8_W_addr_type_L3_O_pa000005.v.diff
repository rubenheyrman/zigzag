--- /users/students/r0678912/Downloads/zigzag/hls_impl/PE/Catapult/SIF/power_top_5_32_1_1_O_addr_type_L1_32_1_1_I_addr_type_L1_32_1_1_W_addr_type_L1_5_288_8_8_O_addr_type_L2_312_8_8_I_addr_type_L2_1728_8_8_W_addr_type_L2_5_8640_8_8_O_addr_type_L3_8640_8_8_I_addr_type_L3_55296_8_8_W_addr_type_L3_O_pa000005.v	2021-07-13 11:49:22.594566156 +0200
+++ /users/students/r0678912/Downloads/zigzag/hls_impl/PE/Catapult/SIF/powerpro_v/power_top_5_32_1_1_O_addr_type_L1_32_1_1_I_addr_type_L1_32_1_1_W_addr_type_L1_5_288_8_8_O_addr_type_L2_312_8_8_I_addr_type_L2_1728_8_8_W_addr_type_L2_5_8640_8_8_O_addr_type_L3_8640_8_8_I_addr_type_L3_55296_8_8_W_addr_type_L3_O_pa000005.v	2021-07-13 11:50:28.494206180 +0200
@@ -13,6 +13,628 @@
 // ------------------------------------------------------------------
 
 
+//PowerPro-CG
+module topless_5comma_32comma_1comma_1comma_O_addr_type_L1comma_32comma_1comma_1comma_I_addr_type_L1comma_32comma_1comma_1comma_W_addr_type_L1comma_5comma_288comma_8comma_8comma_O_addr_type_L2comma_312comma_8comma_8comma_I_addr_type_L2c000151_PP_0 (
+  loop_bound, tile_sizes, pntr_in, pntr_out, irrel_at_max_out, irrel_at_zero_out,
+      all_at_max_1_out, counter_in, counter_out, tile_bound_in, tile_bound_out
+  , //PowerPro-CG
+  counter_or_nl_2
+  , //PowerPro-CG
+  counter_nand_nl_3
+  , //PowerPro-CG
+  counter_nand_2_nl_4
+  , //PowerPro-CG
+  counter_nand_1_nl_5
+  , //PowerPro-CG
+  counter_nand_3_nl_6
+  , //PowerPro-CG
+  mux_44_nl_7
+  , //PowerPro-CG
+  tile_pntr_nand_nl_8
+);
+  input [24:0] loop_bound;
+  input [24:0] tile_sizes;
+  input [4:0] pntr_in;
+  output [4:0] pntr_out;
+  output irrel_at_max_out;
+  output irrel_at_zero_out;
+  output all_at_max_1_out;
+  input [24:0] counter_in;
+  output [24:0] counter_out;
+  input [24:0] tile_bound_in;
+  output [24:0] tile_bound_out;
+ output	wire		[0:0]		counter_or_nl_2; // PowerPro-CG
+ output	wire		[0:0]		counter_nand_nl_3; // PowerPro-CG
+ output	wire		[0:0]		counter_nand_2_nl_4; // PowerPro-CG
+ output	wire		[0:0]		counter_nand_1_nl_5; // PowerPro-CG
+ output	wire		[0:0]		counter_nand_3_nl_6; // PowerPro-CG
+ output	wire		[0:0]		mux_44_nl_7; // PowerPro-CG
+ output	wire		[0:0]		tile_pntr_nand_nl_8; // PowerPro-CG
+
+
+  // Interconnect Declarations
+  wire for_1_unequal_4_tmp;
+  wire [5:0] operator_5_false_acc_4_tmp;
+  wire [6:0] nl_operator_5_false_acc_4_tmp;
+  wire for_1_unequal_3_tmp;
+  wire [5:0] operator_5_false_acc_3_tmp;
+  wire [6:0] nl_operator_5_false_acc_3_tmp;
+  wire for_1_unequal_2_tmp;
+  wire [5:0] operator_5_false_acc_2_tmp;
+  wire [6:0] nl_operator_5_false_acc_2_tmp;
+  wire for_1_unequal_1_tmp;
+  wire [5:0] operator_5_false_acc_1_tmp;
+  wire [6:0] nl_operator_5_false_acc_1_tmp;
+  wire for_1_for_1_for_1_for_1_nor_tmp;
+  wire and_dcpl;
+  wire and_dcpl_3;
+  wire and_dcpl_4;
+  wire and_dcpl_9;
+  wire and_dcpl_10;
+  wire and_dcpl_12;
+  wire or_tmp_4;
+  wire and_tmp;
+  wire and_dcpl_24;
+  wire or_tmp_14;
+  wire mux_tmp_24;
+  wire mux_tmp_25;
+  wire and_dcpl_27;
+  wire and_dcpl_28;
+  wire or_dcpl_10;
+  wire or_tmp_31;
+  wire mux_tmp_30;
+  wire and_dcpl_35;
+  wire or_dcpl_13;
+  wire or_tmp_41;
+  wire not_tmp_24;
+  wire and_dcpl_38;
+  wire and_dcpl_46;
+  wire or_dcpl_16;
+  wire or_dcpl_18;
+  wire or_dcpl_21;
+  wire and_dcpl_53;
+  wire or_dcpl_23;
+  wire or_dcpl_25;
+  wire or_tmp_48;
+  wire and_dcpl_64;
+  wire and_dcpl_65;
+  wire [4:0] counter_buf_4_1_mx0;
+  wire [4:0] counter_buf_3_1_mx0;
+  wire [4:0] counter_buf_2_1_mx0;
+  wire [4:0] counter_buf_1_1_mx0;
+  wire equal_mdf_1;
+  wire [5:0] operator_5_false_acc_cse_1;
+  wire [6:0] nl_operator_5_false_acc_cse_1;
+  wire [4:0] counter_buf_0_1_mx1;
+  wire mux_9_cse;
+  wire or_89_cse;
+  wire or_79_cse;
+  wire or_75_cse;
+  wire or_82_cse;
+  wire or_20_cse;
+  wire nor_16_cse;
+  wire nand_4_cse;
+  wire and_84_cse;
+  wire mux_14_cse;
+  wire for_1_unequal_itm;
+  wire and_dcpl_103;
+  wire and_dcpl_109;
+  wire and_dcpl_113;
+  wire and_dcpl_116;
+  wire and_dcpl_118;
+  wire and_dcpl_121;
+  wire [4:0] z_out_3;
+  wire [4:0] z_out_6;
+  wire [5:0] nl_z_out_6;
+  wire [4:0] pntr_buf_2;
+  wire [5:0] nl_pntr_buf_2;
+  wire or_21_cse;
+  wire for_1_for_1_for_1_for_1_nor_4_cse;
+  wire or_100_cse;
+  wire operator_5_false_1_acc_4_itm_5_1;
+  wire operator_5_false_1_acc_3_itm_5_1;
+  wire operator_5_false_1_acc_2_itm_5_1;
+  wire operator_5_false_1_acc_1_itm_5_1;
+  wire operator_5_false_1_acc_itm_5_1;
+  wire mux_53_cse;
+  wire mux_54_cse;
+
+  wire[4:0] tile_bound_mux1h_4_nl;
+  wire[4:0] for_2_if_acc_nl;
+  wire[5:0] nl_for_2_if_acc_nl;
+  wire[4:0] for_2_if_mux_6_nl;
+  wire[0:0] tile_bound_or_nl;
+  wire[4:0] tile_bound_mux1h_3_nl;
+  wire[4:0] for_2_if_for_acc_nl;
+  wire[5:0] nl_for_2_if_for_acc_nl;
+  wire[4:0] for_2_if_for_for_2_if_for_mux_5_nl;
+  wire[0:0] and_175_nl;
+  wire[0:0] tile_bound_or_1_nl;
+  wire[4:0] tile_bound_mux1h_2_nl;
+  wire[4:0] acc_nl;
+  wire[5:0] nl_acc_nl;
+  wire[4:0] for_2_if_for_for_2_if_for_mux_7_nl;
+  wire[0:0] and_177_nl;
+  wire[0:0] tile_bound_or_2_nl;
+  wire[4:0] tile_bound_mux1h_1_nl;
+  wire[4:0] for_2_if_for_acc_12_nl;
+  wire[5:0] nl_for_2_if_for_acc_12_nl;
+  wire[4:0] for_2_if_for_for_2_if_for_mux_6_nl;
+  wire[0:0] and_176_nl;
+  wire[0:0] tile_bound_or_3_nl;
+  wire[4:0] tile_bound_mux1h_nl;
+  wire[4:0] for_2_if_for_acc_13_nl;
+  wire[5:0] nl_for_2_if_for_acc_13_nl;
+  wire[4:0] for_2_if_for_for_2_if_for_mux_4_nl;
+  wire[0:0] and_174_nl;
+  wire[0:0] mux_52_nl;
+  wire[0:0] tile_bound_or_4_nl;
+  wire[4:0] tile_pntr_and_nl;
+  wire[0:0] tile_pntr_nand_nl;
+  wire[0:0] mux_44_nl;
+  wire[0:0] mux_43_nl;
+  wire[0:0] mux_42_nl;
+  wire[0:0] mux_41_nl;
+  wire[0:0] mux_40_nl;
+  wire[0:0] mux_39_nl;
+  wire[0:0] mux_8_nl;
+  wire[0:0] mux_7_nl;
+  wire[0:0] and_88_nl;
+  wire[4:0] for_2_if_for_for_2_if_for_and_1_nl;
+  wire[4:0] for_2_if_for_mux_1_nl;
+  wire[0:0] nor_24_nl;
+  wire[0:0] counter_nand_4_nl;
+  wire[0:0] mux_24_nl;
+  wire[0:0] mux_23_nl;
+  wire[0:0] nor_21_nl;
+  wire[0:0] mux_22_nl;
+  wire[0:0] mux_21_nl;
+  wire[0:0] nand_3_nl;
+  wire[0:0] or_26_nl;
+  wire[0:0] or_24_nl;
+  wire[0:0] mux_20_nl;
+  wire[0:0] mux_32_nl;
+  wire[0:0] mux_31_nl;
+  wire[0:0] nor_18_nl;
+  wire[0:0] mux_30_nl;
+  wire[0:0] nand_1_nl;
+  wire[0:0] or_44_nl;
+  wire[0:0] mux_29_nl;
+  wire[0:0] nor_5_nl;
+  wire[0:0] mux_38_nl;
+  wire[0:0] mux_37_nl;
+  wire[0:0] mux_36_nl;
+  wire[0:0] or_59_nl;
+  wire[0:0] mux_35_nl;
+  wire[0:0] or_56_nl;
+  wire[0:0] mux_34_nl;
+  wire[0:0] nor_7_nl;
+  wire[0:0] mux_45_nl;
+  wire[0:0] nor_30_nl;
+  wire[0:0] nand_7_nl;
+  wire[0:0] nor_10_nl;
+  wire[0:0] mux_13_nl;
+  wire[0:0] mux_12_nl;
+  wire[0:0] mux_11_nl;
+  wire[0:0] mux_10_nl;
+  wire[4:0] for_2_if_for_mux_nl;
+  wire[0:0] counter_nand_3_nl;
+  wire[4:0] for_2_if_for_mux_2_nl;
+  wire[0:0] counter_nand_2_nl;
+  wire[4:0] for_2_if_for_mux_3_nl;
+  wire[0:0] counter_nand_1_nl;
+  wire[4:0] for_2_if_for_mux_4_nl;
+  wire[0:0] counter_or_nl;
+  wire[4:0] counter_mux_nl;
+  wire[0:0] counter_nand_nl;
+  wire[5:0] operator_5_false_1_acc_4_nl;
+  wire[6:0] nl_operator_5_false_1_acc_4_nl;
+  wire[5:0] operator_5_false_1_acc_3_nl;
+  wire[6:0] nl_operator_5_false_1_acc_3_nl;
+  wire[5:0] operator_5_false_1_acc_2_nl;
+  wire[6:0] nl_operator_5_false_1_acc_2_nl;
+  wire[5:0] operator_5_false_1_acc_1_nl;
+  wire[6:0] nl_operator_5_false_1_acc_1_nl;
+  wire[5:0] operator_5_false_1_acc_nl;
+  wire[6:0] nl_operator_5_false_1_acc_nl;
+  wire[0:0] nand_nl;
+  wire[0:0] or_34_nl;
+  wire[0:0] mux_26_nl;
+  wire[0:0] mux_25_nl;
+  wire[0:0] or_32_nl;
+  wire[0:0] or_31_nl;
+  wire[0:0] and_171_nl;
+  wire[5:0] acc_3_nl;
+  wire[6:0] nl_acc_3_nl;
+  wire[4:0] for_2_if_mux1h_3_nl;
+  wire[4:0] for_2_if_mux1h_4_nl;
+  wire[4:0] for_2_if_mux1h_5_nl;
+  wire[0:0] and_179_nl;
+
+  // Interconnect Declarations for Component Instantiations
+  assign counter_out = {counter_buf_4_1_mx0 , counter_buf_3_1_mx0 , counter_buf_2_1_mx0
+      , counter_buf_1_1_mx0 , counter_buf_0_1_mx1};
+  assign for_2_if_mux_6_nl = MUX_v_5_2_2(z_out_3, (tile_bound_in[24:20]), for_1_for_1_for_1_for_1_nor_4_cse);
+  assign nl_for_2_if_acc_nl = for_2_if_mux_6_nl + (tile_sizes[24:20]);
+  assign for_2_if_acc_nl = nl_for_2_if_acc_nl[4:0];
+  assign tile_bound_or_nl = and_dcpl_53 | (and_dcpl_64 & (~ equal_mdf_1) & operator_5_false_1_acc_4_itm_5_1
+      & (~ for_1_unequal_3_tmp) & and_dcpl);
+  assign tile_bound_mux1h_4_nl = MUX1HOT_v_5_3_2(for_2_if_acc_nl, (tile_sizes[24:20]),
+      (tile_bound_in[24:20]), {tile_bound_or_nl , and_dcpl_65 , or_dcpl_25});
+  assign and_175_nl = (~(or_82_cse & operator_5_false_1_acc_4_itm_5_1)) & and_dcpl_103;
+  assign for_2_if_for_for_2_if_for_mux_5_nl = MUX_v_5_2_2(z_out_3, (tile_bound_in[19:15]),
+      and_175_nl);
+  assign nl_for_2_if_for_acc_nl = for_2_if_for_for_2_if_for_mux_5_nl + (tile_sizes[19:15]);
+  assign for_2_if_for_acc_nl = nl_for_2_if_for_acc_nl[4:0];
+  assign tile_bound_or_1_nl = and_dcpl_53 | and_dcpl_46 | ((nor_16_cse | (~ operator_5_false_1_acc_4_itm_5_1))
+      & and_dcpl_3 & and_dcpl_12 & operator_5_false_1_acc_3_itm_5_1 & and_dcpl_38);
+  assign tile_bound_mux1h_3_nl = MUX1HOT_v_5_3_2(for_2_if_for_acc_nl, (tile_sizes[19:15]),
+      (tile_bound_in[19:15]), {tile_bound_or_1_nl , and_dcpl_65 , or_dcpl_21});
+  assign and_177_nl = (~ mux_54_cse) & and_dcpl_12;
+  assign for_2_if_for_for_2_if_for_mux_7_nl = MUX_v_5_2_2(z_out_3, (tile_bound_in[14:10]),
+      and_177_nl);
+  assign nl_acc_nl = for_2_if_for_for_2_if_for_mux_7_nl + (tile_sizes[14:10]);
+  assign acc_nl = nl_acc_nl[4:0];
+  assign tile_bound_or_2_nl = and_dcpl_53 | and_dcpl_46 | and_dcpl_35 | ((~ mux_tmp_30)
+      & and_dcpl_4 & (~ (operator_5_false_acc_2_tmp[5])) & operator_5_false_1_acc_2_itm_5_1
+      & for_1_for_1_for_1_for_1_nor_tmp);
+  assign tile_bound_mux1h_2_nl = MUX1HOT_v_5_3_2(acc_nl, (tile_sizes[14:10]), (tile_bound_in[14:10]),
+      {tile_bound_or_2_nl , and_dcpl_65 , or_dcpl_13});
+  assign and_176_nl = (~ mux_53_cse) & and_dcpl_3;
+  assign for_2_if_for_for_2_if_for_mux_6_nl = MUX_v_5_2_2(z_out_3, (tile_bound_in[9:5]),
+      and_176_nl);
+  assign nl_for_2_if_for_acc_12_nl = for_2_if_for_for_2_if_for_mux_6_nl + (tile_sizes[9:5]);
+  assign for_2_if_for_acc_12_nl = nl_for_2_if_for_acc_12_nl[4:0];
+  assign tile_bound_or_3_nl = and_dcpl_53 | and_dcpl_46 | and_dcpl_35 | and_dcpl_28
+      | ((~ mux_tmp_25) & and_dcpl_3 & and_dcpl_27);
+  assign tile_bound_mux1h_1_nl = MUX1HOT_v_5_3_2(for_2_if_for_acc_12_nl, (tile_sizes[9:5]),
+      (tile_bound_in[9:5]), {tile_bound_or_3_nl , and_dcpl_65 , or_dcpl_10});
+  assign mux_52_nl = MUX_s_1_2_2(mux_53_cse, operator_5_false_1_acc_1_itm_5_1, or_20_cse);
+  assign and_174_nl = (~ mux_52_nl) & for_1_for_1_for_1_for_1_nor_tmp;
+  assign for_2_if_for_for_2_if_for_mux_4_nl = MUX_v_5_2_2(z_out_3, (tile_bound_in[4:0]),
+      and_174_nl);
+  assign nl_for_2_if_for_acc_13_nl = for_2_if_for_for_2_if_for_mux_4_nl + (tile_sizes[4:0]);
+  assign for_2_if_for_acc_13_nl = nl_for_2_if_for_acc_13_nl[4:0];
+  assign tile_bound_or_4_nl = and_dcpl_53 | and_dcpl_46 | and_dcpl_35 | and_dcpl_28
+      | ((~ for_1_for_1_for_1_for_1_nor_tmp) & operator_5_false_1_acc_itm_5_1) |
+      ((~ mux_14_cse) & for_1_for_1_for_1_for_1_nor_tmp & operator_5_false_1_acc_itm_5_1);
+  assign tile_bound_mux1h_nl = MUX1HOT_v_5_3_2(for_2_if_for_acc_13_nl, (tile_sizes[4:0]),
+      (tile_bound_in[4:0]), {tile_bound_or_4_nl , and_dcpl_65 , and_dcpl_24});
+  assign tile_bound_out = {tile_bound_mux1h_4_nl , tile_bound_mux1h_3_nl , tile_bound_mux1h_2_nl
+      , tile_bound_mux1h_1_nl , tile_bound_mux1h_nl};
+  assign or_89_cse = equal_mdf_1 | for_1_unequal_4_tmp | (operator_5_false_acc_4_tmp[5]);
+  assign or_79_cse = for_1_unequal_3_tmp | (operator_5_false_acc_3_tmp[5]);
+  assign or_75_cse = for_1_unequal_2_tmp | (operator_5_false_acc_2_tmp[5]);
+  assign and_84_cse = or_89_cse & operator_5_false_1_acc_4_itm_5_1;
+  assign tile_pntr_nand_nl = ~(and_dcpl_10 & (~ (operator_5_false_acc_4_tmp[5]))
+      & (~ for_1_unequal_3_tmp) & and_dcpl);
+  assign tile_pntr_and_nl = MUX_v_5_2_2(5'b00000, z_out_3, tile_pntr_nand_nl);
+  assign mux_41_nl = MUX_s_1_2_2(and_tmp, or_tmp_48, and_84_cse);
+  assign mux_40_nl = MUX_s_1_2_2(and_tmp, or_tmp_48, operator_5_false_1_acc_3_itm_5_1);
+  assign mux_42_nl = MUX_s_1_2_2(mux_41_nl, mux_40_nl, or_79_cse);
+  assign mux_39_nl = MUX_s_1_2_2(and_tmp, or_tmp_48, operator_5_false_1_acc_2_itm_5_1);
+  assign mux_43_nl = MUX_s_1_2_2(mux_42_nl, mux_39_nl, or_75_cse);
+  assign mux_44_nl = MUX_s_1_2_2(operator_5_false_1_acc_itm_5_1, mux_43_nl, for_1_for_1_for_1_for_1_nor_tmp);
+  assign pntr_out = MUX_v_5_2_2(pntr_buf_2, tile_pntr_and_nl, mux_44_nl);
+  assign and_88_nl = (equal_mdf_1 | for_1_unequal_4_tmp) & operator_5_false_1_acc_4_itm_5_1;
+  assign mux_7_nl = MUX_s_1_2_2(and_88_nl, operator_5_false_1_acc_3_itm_5_1, for_1_unequal_3_tmp);
+  assign mux_8_nl = MUX_s_1_2_2(mux_7_nl, operator_5_false_1_acc_2_itm_5_1, for_1_unequal_2_tmp);
+  assign mux_9_cse = MUX_s_1_2_2(mux_8_nl, operator_5_false_1_acc_1_itm_5_1, for_1_unequal_1_tmp);
+  assign nor_24_nl = ~((mux_9_cse & for_1_for_1_for_1_for_1_nor_tmp) | operator_5_false_1_acc_itm_5_1);
+  assign for_2_if_for_mux_1_nl = MUX_v_5_2_2(z_out_6, (counter_in[4:0]), nor_24_nl);
+  assign counter_nand_4_nl = ~((mux_9_cse | operator_5_false_1_acc_itm_5_1) & for_1_for_1_for_1_for_1_nor_tmp);
+  assign for_2_if_for_for_2_if_for_and_1_nl = MUX_v_5_2_2(5'b00000, for_2_if_for_mux_1_nl,
+      counter_nand_4_nl);
+  assign irrel_at_max_out = (~((for_2_if_for_for_2_if_for_and_1_nl != (operator_5_false_acc_cse_1[4:0]))
+      | (operator_5_false_acc_cse_1[5]))) & (~((operator_5_false_acc_1_tmp[5]) |
+      (counter_buf_1_1_mx0 != (operator_5_false_acc_1_tmp[4:0])))) & (~((operator_5_false_acc_2_tmp[5])
+      | (counter_buf_2_1_mx0 != (operator_5_false_acc_2_tmp[4:0])))) & (~((operator_5_false_acc_3_tmp[5])
+      | (counter_buf_3_1_mx0 != (operator_5_false_acc_3_tmp[4:0])))) & (~((operator_5_false_acc_4_tmp[5])
+      | (counter_buf_4_1_mx0 != (operator_5_false_acc_4_tmp[4:0]))));
+  assign or_82_cse = for_1_unequal_4_tmp | (operator_5_false_acc_4_tmp[5]);
+  assign or_20_cse = for_1_unequal_1_tmp | (operator_5_false_acc_1_tmp[5]);
+  assign nor_16_cse = ~(equal_mdf_1 | for_1_unequal_4_tmp | (operator_5_false_acc_4_tmp[5]));
+  assign nand_4_cse = ~(or_89_cse & operator_5_false_1_acc_4_itm_5_1);
+  assign or_21_cse = (z_out_6!=5'b00000);
+  assign nand_3_nl = ~(nand_4_cse & or_tmp_14);
+  assign or_26_nl = operator_5_false_1_acc_3_itm_5_1 | (~ or_tmp_14);
+  assign mux_21_nl = MUX_s_1_2_2(nand_3_nl, or_26_nl, or_79_cse);
+  assign or_24_nl = operator_5_false_1_acc_2_itm_5_1 | (~ or_tmp_14);
+  assign mux_22_nl = MUX_s_1_2_2(mux_21_nl, or_24_nl, or_75_cse);
+  assign nor_21_nl = ~(operator_5_false_1_acc_1_itm_5_1 | mux_22_nl);
+  assign mux_20_nl = MUX_s_1_2_2(or_tmp_14, or_21_cse, operator_5_false_1_acc_1_itm_5_1);
+  assign mux_23_nl = MUX_s_1_2_2(nor_21_nl, mux_20_nl, or_20_cse);
+  assign mux_24_nl = MUX_s_1_2_2(or_tmp_14, mux_23_nl, for_1_for_1_for_1_for_1_nor_tmp);
+  assign nand_1_nl = ~(nand_4_cse & or_tmp_31);
+  assign or_44_nl = operator_5_false_1_acc_3_itm_5_1 | (~ or_tmp_31);
+  assign mux_30_nl = MUX_s_1_2_2(nand_1_nl, or_44_nl, or_79_cse);
+  assign nor_18_nl = ~(operator_5_false_1_acc_2_itm_5_1 | mux_30_nl);
+  assign mux_29_nl = MUX_s_1_2_2(or_tmp_31, or_21_cse, operator_5_false_1_acc_2_itm_5_1);
+  assign mux_31_nl = MUX_s_1_2_2(nor_18_nl, mux_29_nl, or_75_cse);
+  assign nor_5_nl = ~(for_1_unequal_1_tmp | (operator_5_false_acc_1_tmp[5]) | (~
+      for_1_for_1_for_1_for_1_nor_tmp));
+  assign mux_32_nl = MUX_s_1_2_2(or_tmp_31, mux_31_nl, nor_5_nl);
+  assign or_59_nl = nor_16_cse | (~ operator_5_false_1_acc_4_itm_5_1) | for_1_unequal_2_tmp
+      | (operator_5_false_acc_2_tmp[5]) | for_1_unequal_1_tmp | (operator_5_false_acc_1_tmp[5]);
+  assign mux_36_nl = MUX_s_1_2_2(not_tmp_24, or_tmp_41, or_59_nl);
+  assign or_56_nl = for_1_unequal_2_tmp | (operator_5_false_acc_2_tmp[5]) | for_1_unequal_1_tmp
+      | (operator_5_false_acc_1_tmp[5]);
+  assign mux_35_nl = MUX_s_1_2_2(not_tmp_24, or_tmp_41, or_56_nl);
+  assign mux_37_nl = MUX_s_1_2_2(mux_36_nl, mux_35_nl, operator_5_false_1_acc_3_itm_5_1);
+  assign nor_7_nl = ~((~ operator_5_false_1_acc_3_itm_5_1) | for_1_unequal_2_tmp
+      | (operator_5_false_acc_2_tmp[5]) | for_1_unequal_1_tmp | (operator_5_false_acc_1_tmp[5])
+      | (~ for_1_for_1_for_1_for_1_nor_tmp));
+  assign mux_34_nl = MUX_s_1_2_2(or_tmp_41, or_21_cse, nor_7_nl);
+  assign mux_38_nl = MUX_s_1_2_2(mux_37_nl, mux_34_nl, or_79_cse);
+  assign nor_30_nl = ~((counter_in[24:20]!=5'b00000));
+  assign nand_7_nl = ~(or_82_cse & or_21_cse);
+  assign nor_10_nl = ~((~ operator_5_false_1_acc_4_itm_5_1) | for_1_unequal_3_tmp
+      | (operator_5_false_acc_3_tmp[5]) | for_1_unequal_2_tmp | (operator_5_false_acc_2_tmp[5])
+      | for_1_unequal_1_tmp | (operator_5_false_acc_1_tmp[5]) | (~ for_1_for_1_for_1_for_1_nor_tmp));
+  assign mux_45_nl = MUX_s_1_2_2(nor_30_nl, nand_7_nl, nor_10_nl);
+  assign irrel_at_zero_out = (~((counter_buf_0_1_mx1!=5'b00000) | mux_24_nl | mux_32_nl
+      | mux_38_nl)) & mux_45_nl;
+  assign for_1_for_1_for_1_for_1_nor_4_cse = ~(for_1_unequal_4_tmp | (operator_5_false_acc_4_tmp[5]));
+  assign all_at_max_1_out = for_1_for_1_for_1_for_1_nor_4_cse & (~(or_dcpl_16 | (operator_5_false_acc_2_tmp[5])
+      | (~ equal_mdf_1) | or_dcpl_23));
+  assign mux_12_nl = MUX_s_1_2_2(and_tmp, or_tmp_4, and_84_cse);
+  assign mux_11_nl = MUX_s_1_2_2(and_tmp, or_tmp_4, operator_5_false_1_acc_3_itm_5_1);
+  assign mux_13_nl = MUX_s_1_2_2(mux_12_nl, mux_11_nl, or_79_cse);
+  assign mux_10_nl = MUX_s_1_2_2(and_tmp, or_tmp_4, operator_5_false_1_acc_2_itm_5_1);
+  assign mux_14_cse = MUX_s_1_2_2(mux_13_nl, mux_10_nl, or_75_cse);
+  assign for_2_if_for_mux_nl = MUX_v_5_2_2(z_out_6, (counter_in[4:0]), and_dcpl_24);
+  assign counter_nand_3_nl = ~((mux_14_cse | operator_5_false_1_acc_itm_5_1) & for_1_for_1_for_1_for_1_nor_tmp);
+  assign counter_buf_0_1_mx1 = MUX_v_5_2_2(5'b00000, for_2_if_for_mux_nl, counter_nand_3_nl);
+  assign for_2_if_for_mux_2_nl = MUX_v_5_2_2(z_out_6, (counter_in[9:5]), or_dcpl_10);
+  assign counter_nand_2_nl = ~((mux_tmp_25 | operator_5_false_1_acc_1_itm_5_1) &
+      and_dcpl_3 & for_1_for_1_for_1_for_1_nor_tmp);
+  assign counter_buf_1_1_mx0 = MUX_v_5_2_2(5'b00000, for_2_if_for_mux_2_nl, counter_nand_2_nl);
+  assign nl_pntr_buf_2 = pntr_in + 5'b00001;
+  assign pntr_buf_2 = nl_pntr_buf_2[4:0];
+  assign for_2_if_for_mux_3_nl = MUX_v_5_2_2(z_out_6, (counter_in[14:10]), or_dcpl_13);
+  assign counter_nand_1_nl = ~((mux_tmp_30 | operator_5_false_1_acc_2_itm_5_1) &
+      and_dcpl_4 & (~ (operator_5_false_acc_2_tmp[5])) & for_1_for_1_for_1_for_1_nor_tmp);
+  assign counter_buf_2_1_mx0 = MUX_v_5_2_2(5'b00000, for_2_if_for_mux_3_nl, counter_nand_1_nl);
+  assign for_2_if_for_mux_4_nl = MUX_v_5_2_2(z_out_6, (counter_in[19:15]), or_dcpl_21);
+  assign counter_or_nl = (~(and_84_cse | operator_5_false_1_acc_3_itm_5_1)) | for_1_unequal_1_tmp
+      | (operator_5_false_acc_1_tmp[5]) | for_1_unequal_2_tmp | (operator_5_false_acc_2_tmp[5])
+      | (~ and_dcpl_38);
+  assign counter_buf_3_1_mx0 = MUX_v_5_2_2(5'b00000, for_2_if_for_mux_4_nl, counter_or_nl);
+  assign counter_mux_nl = MUX_v_5_2_2(z_out_6, (counter_in[24:20]), or_dcpl_25);
+  assign counter_nand_nl = ~(and_dcpl_10 & (~ (operator_5_false_acc_4_tmp[5])) &
+      operator_5_false_1_acc_4_itm_5_1 & (~ for_1_unequal_3_tmp) & and_dcpl);
+  assign counter_buf_4_1_mx0 = MUX_v_5_2_2(5'b00000, counter_mux_nl, counter_nand_nl);
+  assign for_1_unequal_4_tmp = (counter_in[24:20]) != (operator_5_false_acc_4_tmp[4:0]);
+  assign nl_operator_5_false_acc_cse_1 = conv_u2s_5_6(loop_bound[4:0]) + 6'b111111;
+  assign operator_5_false_acc_cse_1 = nl_operator_5_false_acc_cse_1[5:0];
+  assign nl_operator_5_false_acc_4_tmp = conv_u2s_5_6(loop_bound[24:20]) + 6'b111111;
+  assign operator_5_false_acc_4_tmp = nl_operator_5_false_acc_4_tmp[5:0];
+  assign nl_operator_5_false_acc_3_tmp = conv_u2s_5_6(loop_bound[19:15]) + 6'b111111;
+  assign operator_5_false_acc_3_tmp = nl_operator_5_false_acc_3_tmp[5:0];
+  assign nl_operator_5_false_acc_2_tmp = conv_u2s_5_6(loop_bound[14:10]) + 6'b111111;
+  assign operator_5_false_acc_2_tmp = nl_operator_5_false_acc_2_tmp[5:0];
+  assign nl_operator_5_false_acc_1_tmp = conv_u2s_5_6(loop_bound[9:5]) + 6'b111111;
+  assign operator_5_false_acc_1_tmp = nl_operator_5_false_acc_1_tmp[5:0];
+  assign equal_mdf_1 = pntr_buf_2 == (tile_sizes[24:20]);
+  assign nl_operator_5_false_1_acc_4_nl = ({1'b1 , (tile_bound_in[24:20])}) + conv_u2s_5_6(~
+      pntr_buf_2);
+  assign operator_5_false_1_acc_4_nl = nl_operator_5_false_1_acc_4_nl[5:0];
+  assign operator_5_false_1_acc_4_itm_5_1 = readslicef_6_1_5(operator_5_false_1_acc_4_nl);
+  assign nl_operator_5_false_1_acc_3_nl = ({1'b1 , (tile_bound_in[19:15])}) + conv_u2s_5_6(~
+      pntr_buf_2);
+  assign operator_5_false_1_acc_3_nl = nl_operator_5_false_1_acc_3_nl[5:0];
+  assign operator_5_false_1_acc_3_itm_5_1 = readslicef_6_1_5(operator_5_false_1_acc_3_nl);
+  assign for_1_unequal_3_tmp = (counter_in[19:15]) != (operator_5_false_acc_3_tmp[4:0]);
+  assign nl_operator_5_false_1_acc_2_nl = ({1'b1 , (tile_bound_in[14:10])}) + conv_u2s_5_6(~
+      pntr_buf_2);
+  assign operator_5_false_1_acc_2_nl = nl_operator_5_false_1_acc_2_nl[5:0];
+  assign operator_5_false_1_acc_2_itm_5_1 = readslicef_6_1_5(operator_5_false_1_acc_2_nl);
+  assign for_1_unequal_2_tmp = (counter_in[14:10]) != (operator_5_false_acc_2_tmp[4:0]);
+  assign nl_operator_5_false_1_acc_1_nl = ({1'b1 , (tile_bound_in[9:5])}) + conv_u2s_5_6(~
+      pntr_buf_2);
+  assign operator_5_false_1_acc_1_nl = nl_operator_5_false_1_acc_1_nl[5:0];
+  assign operator_5_false_1_acc_1_itm_5_1 = readslicef_6_1_5(operator_5_false_1_acc_1_nl);
+  assign for_1_unequal_1_tmp = (counter_in[9:5]) != (operator_5_false_acc_1_tmp[4:0]);
+  assign nl_operator_5_false_1_acc_nl = ({1'b1 , (tile_bound_in[4:0])}) + conv_u2s_5_6(~
+      pntr_buf_2);
+  assign operator_5_false_1_acc_nl = nl_operator_5_false_1_acc_nl[5:0];
+  assign operator_5_false_1_acc_itm_5_1 = readslicef_6_1_5(operator_5_false_1_acc_nl);
+  assign for_1_unequal_itm = (counter_in[4:0]) != (operator_5_false_acc_cse_1[4:0]);
+  assign for_1_for_1_for_1_for_1_nor_tmp = ~(for_1_unequal_itm | (operator_5_false_acc_cse_1[5]));
+  assign and_dcpl = (~ (operator_5_false_acc_3_tmp[5])) & for_1_for_1_for_1_for_1_nor_tmp;
+  assign and_dcpl_3 = ~(for_1_unequal_1_tmp | (operator_5_false_acc_1_tmp[5]));
+  assign and_dcpl_4 = and_dcpl_3 & (~ for_1_unequal_2_tmp);
+  assign and_dcpl_9 = ~((operator_5_false_acc_2_tmp[5]) | for_1_unequal_4_tmp);
+  assign and_dcpl_10 = and_dcpl_4 & and_dcpl_9;
+  assign and_dcpl_12 = ~(for_1_unequal_2_tmp | (operator_5_false_acc_2_tmp[5]));
+  assign or_tmp_4 = operator_5_false_1_acc_1_itm_5_1 | (~ or_20_cse);
+  assign and_tmp = operator_5_false_1_acc_1_itm_5_1 & or_20_cse;
+  assign and_dcpl_24 = ~((mux_14_cse & for_1_for_1_for_1_for_1_nor_tmp) | operator_5_false_1_acc_itm_5_1);
+  assign or_tmp_14 = (counter_in[9:5]!=5'b00000);
+  assign nand_nl = ~(operator_5_false_1_acc_4_itm_5_1 & (~(nor_16_cse | (operator_5_false_acc_2_tmp[5])
+      | for_1_unequal_2_tmp)));
+  assign or_34_nl = (~ operator_5_false_1_acc_3_itm_5_1) | (operator_5_false_acc_2_tmp[5])
+      | for_1_unequal_2_tmp;
+  assign mux_tmp_24 = MUX_s_1_2_2(nand_nl, or_34_nl, or_79_cse);
+  assign or_32_nl = equal_mdf_1 | (operator_5_false_acc_4_tmp[5]) | for_1_unequal_4_tmp
+      | (operator_5_false_acc_2_tmp[5]) | for_1_unequal_2_tmp;
+  assign mux_25_nl = MUX_s_1_2_2(or_75_cse, or_32_nl, operator_5_false_1_acc_4_itm_5_1);
+  assign or_31_nl = operator_5_false_1_acc_3_itm_5_1 | (operator_5_false_acc_2_tmp[5])
+      | for_1_unequal_2_tmp;
+  assign mux_26_nl = MUX_s_1_2_2(mux_25_nl, or_31_nl, or_79_cse);
+  assign mux_tmp_25 = MUX_s_1_2_2((~ mux_tmp_24), mux_26_nl, operator_5_false_1_acc_2_itm_5_1);
+  assign and_dcpl_27 = operator_5_false_1_acc_1_itm_5_1 & for_1_for_1_for_1_for_1_nor_tmp;
+  assign and_dcpl_28 = or_20_cse & and_dcpl_27;
+  assign or_dcpl_10 = ~(((~((~ mux_tmp_25) | or_20_cse)) | operator_5_false_1_acc_1_itm_5_1)
+      & for_1_for_1_for_1_for_1_nor_tmp);
+  assign or_tmp_31 = (counter_in[14:10]!=5'b00000);
+  assign mux_tmp_30 = MUX_s_1_2_2(and_84_cse, operator_5_false_1_acc_3_itm_5_1, or_79_cse);
+  assign and_dcpl_35 = or_75_cse & (~ for_1_unequal_1_tmp) & (~ (operator_5_false_acc_1_tmp[5]))
+      & operator_5_false_1_acc_2_itm_5_1 & for_1_for_1_for_1_for_1_nor_tmp;
+  assign or_dcpl_13 = (mux_tmp_24 & (~ operator_5_false_1_acc_2_itm_5_1)) | or_20_cse
+      | (~ for_1_for_1_for_1_for_1_nor_tmp);
+  assign or_tmp_41 = (counter_in[19:15]!=5'b00000);
+  assign not_tmp_24 = ~(for_1_for_1_for_1_for_1_nor_tmp | (~ or_tmp_41));
+  assign and_dcpl_38 = (~ for_1_unequal_3_tmp) & (~ (operator_5_false_acc_3_tmp[5]))
+      & for_1_for_1_for_1_for_1_nor_tmp;
+  assign and_dcpl_46 = and_dcpl_3 & or_79_cse & and_dcpl_12 & operator_5_false_1_acc_3_itm_5_1
+      & for_1_for_1_for_1_for_1_nor_tmp;
+  assign or_dcpl_16 = or_20_cse | for_1_unequal_2_tmp;
+  assign or_dcpl_18 = (~ operator_5_false_1_acc_4_itm_5_1) | for_1_unequal_3_tmp;
+  assign or_dcpl_21 = (~((~(nor_16_cse | or_dcpl_18 | (operator_5_false_acc_3_tmp[5])))
+      | operator_5_false_1_acc_3_itm_5_1)) | or_dcpl_16 | (operator_5_false_acc_2_tmp[5])
+      | (~ for_1_for_1_for_1_for_1_nor_tmp);
+  assign and_dcpl_53 = and_dcpl_4 & or_82_cse & (~ (operator_5_false_acc_2_tmp[5]))
+      & operator_5_false_1_acc_4_itm_5_1 & (~ for_1_unequal_3_tmp) & and_dcpl;
+  assign or_dcpl_23 = or_dcpl_18 | (operator_5_false_acc_3_tmp[5]) | (~ for_1_for_1_for_1_for_1_nor_tmp);
+  assign or_dcpl_25 = or_20_cse | or_75_cse | or_dcpl_23;
+  assign or_tmp_48 = and_dcpl_3 | operator_5_false_1_acc_1_itm_5_1;
+  assign and_dcpl_64 = and_dcpl_4 & and_dcpl_9 & (~ (operator_5_false_acc_4_tmp[5]));
+  assign and_dcpl_65 = and_dcpl_64 & equal_mdf_1 & operator_5_false_1_acc_4_itm_5_1
+      & (~ for_1_unequal_3_tmp) & and_dcpl;
+  assign or_100_cse = (operator_5_false_acc_cse_1[5]) | for_1_unequal_itm;
+  assign and_dcpl_103 = ~((operator_5_false_acc_3_tmp[5]) | for_1_unequal_3_tmp);
+  assign and_dcpl_109 = for_1_for_1_for_1_for_1_nor_tmp & or_20_cse;
+  assign and_dcpl_113 = ~(and_dcpl_12 | (operator_5_false_acc_cse_1[5]) | for_1_unequal_itm
+      | (operator_5_false_acc_1_tmp[5]) | for_1_unequal_1_tmp);
+  assign and_dcpl_116 = ~((operator_5_false_acc_2_tmp[5]) | for_1_unequal_2_tmp |
+      (operator_5_false_acc_1_tmp[5]) | for_1_unequal_1_tmp);
+  assign and_dcpl_118 = for_1_for_1_for_1_for_1_nor_tmp & or_79_cse & and_dcpl_116;
+  assign and_dcpl_121 = for_1_for_1_for_1_for_1_nor_tmp & and_dcpl_103 & and_dcpl_116;
+  assign and_171_nl = or_82_cse & operator_5_false_1_acc_4_itm_5_1;
+  assign mux_54_cse = MUX_s_1_2_2(and_171_nl, operator_5_false_1_acc_3_itm_5_1, or_79_cse);
+  assign mux_53_cse = MUX_s_1_2_2(mux_54_cse, operator_5_false_1_acc_2_itm_5_1, or_75_cse);
+  assign for_2_if_mux1h_3_nl = MUX1HOT_v_5_5_2((tile_bound_in[4:0]), (tile_bound_in[9:5]),
+      (tile_bound_in[14:10]), (tile_bound_in[19:15]), (tile_bound_in[24:20]), {or_100_cse
+      , and_dcpl_109 , and_dcpl_113 , and_dcpl_118 , and_dcpl_121});
+  assign for_2_if_mux1h_4_nl = MUX1HOT_v_5_5_2((~ (tile_sizes[4:0])), (~ (tile_sizes[9:5])),
+      (~ (tile_sizes[14:10])), (~ (tile_sizes[19:15])), (~ (tile_sizes[24:20])),
+      {or_100_cse , and_dcpl_109 , and_dcpl_113 , and_dcpl_118 , and_dcpl_121});
+  assign nl_acc_3_nl = ({for_2_if_mux1h_3_nl , 1'b1}) + ({for_2_if_mux1h_4_nl , 1'b1});
+  assign acc_3_nl = nl_acc_3_nl[5:0];
+  assign z_out_3 = readslicef_6_5_1(acc_3_nl);
+  assign and_179_nl = (~(and_dcpl_12 | for_1_unequal_itm)) & (~((operator_5_false_acc_cse_1[5])
+      | (operator_5_false_acc_1_tmp[5]) | for_1_unequal_1_tmp));
+  assign for_2_if_mux1h_5_nl = MUX1HOT_v_5_5_2((counter_in[4:0]), (counter_in[9:5]),
+      (counter_in[14:10]), (counter_in[19:15]), (counter_in[24:20]), {or_100_cse
+      , and_dcpl_109 , and_179_nl , and_dcpl_118 , and_dcpl_121});
+  assign nl_z_out_6 = for_2_if_mux1h_5_nl + 5'b00001;
+ //PowerPro-CG
+ assign counter_or_nl_2 = counter_or_nl;
+ //PowerPro-CG
+ assign counter_nand_nl_3 = counter_nand_nl;
+ //PowerPro-CG
+ assign counter_nand_2_nl_4 = counter_nand_2_nl;
+ //PowerPro-CG
+ assign counter_nand_1_nl_5 = counter_nand_1_nl;
+ //PowerPro-CG
+ assign counter_nand_3_nl_6 = counter_nand_3_nl;
+ //PowerPro-CG
+ assign mux_44_nl_7 = mux_44_nl;
+ //PowerPro-CG
+ assign tile_pntr_nand_nl_8 = tile_pntr_nand_nl;
+  assign z_out_6 = nl_z_out_6[4:0];
+
+  function automatic [4:0] MUX1HOT_v_5_3_2;
+    input [4:0] input_2;
+    input [4:0] input_1;
+    input [4:0] input_0;
+    input [2:0] sel;
+    reg [4:0] result;
+  begin
+    result = input_0 & {5{sel[0]}};
+    result = result | ( input_1 & {5{sel[1]}});
+    result = result | ( input_2 & {5{sel[2]}});
+    MUX1HOT_v_5_3_2 = result;
+  end
+  endfunction
+
+
+  function automatic [4:0] MUX1HOT_v_5_5_2;
+    input [4:0] input_4;
+    input [4:0] input_3;
+    input [4:0] input_2;
+    input [4:0] input_1;
+    input [4:0] input_0;
+    input [4:0] sel;
+    reg [4:0] result;
+  begin
+    result = input_0 & {5{sel[0]}};
+    result = result | ( input_1 & {5{sel[1]}});
+    result = result | ( input_2 & {5{sel[2]}});
+    result = result | ( input_3 & {5{sel[3]}});
+    result = result | ( input_4 & {5{sel[4]}});
+    MUX1HOT_v_5_5_2 = result;
+  end
+  endfunction
+
+
+  function automatic [0:0] MUX_s_1_2_2;
+    input [0:0] input_0;
+    input [0:0] input_1;
+    input [0:0] sel;
+    reg [0:0] result;
+  begin
+    case (sel)
+      1'b0 : begin
+        result = input_0;
+      end
+      default : begin
+        result = input_1;
+      end
+    endcase
+    MUX_s_1_2_2 = result;
+  end
+  endfunction
+
+
+  function automatic [4:0] MUX_v_5_2_2;
+    input [4:0] input_0;
+    input [4:0] input_1;
+    input [0:0] sel;
+    reg [4:0] result;
+  begin
+    case (sel)
+      1'b0 : begin
+        result = input_0;
+      end
+      default : begin
+        result = input_1;
+      end
+    endcase
+    MUX_v_5_2_2 = result;
+  end
+  endfunction
+
+
+  function automatic [0:0] readslicef_6_1_5;
+    input [5:0] vector;
+    reg [5:0] tmp;
+  begin
+    tmp = vector >> 5;
+    readslicef_6_1_5 = tmp[0:0];
+  end
+  endfunction
+
+
+  function automatic [4:0] readslicef_6_5_1;
+    input [5:0] vector;
+    reg [5:0] tmp;
+  begin
+    tmp = vector >> 1;
+    readslicef_6_5_1 = tmp[4:0];
+  end
+  endfunction
+
+
+  function automatic [5:0] conv_u2s_5_6 ;
+    input [4:0]  vector ;
+  begin
+    conv_u2s_5_6 =  {1'b0, vector};
+  end
+  endfunction
+
+endmodule
 module topless_5comma_32comma_1comma_1comma_O_addr_type_L1comma_32comma_1comma_1comma_I_addr_type_L1comma_32comma_1comma_1comma_W_addr_type_L1comma_5comma_288comma_8comma_8comma_O_addr_type_L2comma_312comma_8comma_8comma_I_addr_type_L2c000151 (
   loop_bound, tile_sizes, pntr_in, pntr_out, irrel_at_max_out, irrel_at_zero_out,
       all_at_max_1_out, counter_in, counter_out, tile_bound_in, tile_bound_out
